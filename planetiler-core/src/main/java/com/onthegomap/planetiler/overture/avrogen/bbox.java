/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.onthegomap.planetiler.overture.avrogen;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class bbox extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6187910224769538991L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"bbox\",\"namespace\":\"com.onthegomap.planetiler.overture.avrogen\",\"fields\":[{\"name\":\"minx\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"maxx\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"miny\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"maxy\",\"type\":[\"null\",\"double\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<bbox> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<bbox> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<bbox> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<bbox> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<bbox> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this bbox to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a bbox from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a bbox instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static bbox fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.Double minx;
  private java.lang.Double maxx;
  private java.lang.Double miny;
  private java.lang.Double maxy;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public bbox() {}

  /**
   * All-args constructor.
   * @param minx The new value for minx
   * @param maxx The new value for maxx
   * @param miny The new value for miny
   * @param maxy The new value for maxy
   */
  public bbox(java.lang.Double minx, java.lang.Double maxx, java.lang.Double miny, java.lang.Double maxy) {
    this.minx = minx;
    this.maxx = maxx;
    this.miny = miny;
    this.maxy = maxy;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return minx;
    case 1: return maxx;
    case 2: return miny;
    case 3: return maxy;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: minx = (java.lang.Double)value$; break;
    case 1: maxx = (java.lang.Double)value$; break;
    case 2: miny = (java.lang.Double)value$; break;
    case 3: maxy = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'minx' field.
   * @return The value of the 'minx' field.
   */
  public java.lang.Double getMinx() {
    return minx;
  }


  /**
   * Sets the value of the 'minx' field.
   * @param value the value to set.
   */
  public void setMinx(java.lang.Double value) {
    this.minx = value;
  }

  /**
   * Gets the value of the 'maxx' field.
   * @return The value of the 'maxx' field.
   */
  public java.lang.Double getMaxx() {
    return maxx;
  }


  /**
   * Sets the value of the 'maxx' field.
   * @param value the value to set.
   */
  public void setMaxx(java.lang.Double value) {
    this.maxx = value;
  }

  /**
   * Gets the value of the 'miny' field.
   * @return The value of the 'miny' field.
   */
  public java.lang.Double getMiny() {
    return miny;
  }


  /**
   * Sets the value of the 'miny' field.
   * @param value the value to set.
   */
  public void setMiny(java.lang.Double value) {
    this.miny = value;
  }

  /**
   * Gets the value of the 'maxy' field.
   * @return The value of the 'maxy' field.
   */
  public java.lang.Double getMaxy() {
    return maxy;
  }


  /**
   * Sets the value of the 'maxy' field.
   * @param value the value to set.
   */
  public void setMaxy(java.lang.Double value) {
    this.maxy = value;
  }

  /**
   * Creates a new bbox RecordBuilder.
   * @return A new bbox RecordBuilder
   */
  public static com.onthegomap.planetiler.overture.avrogen.bbox.Builder newBuilder() {
    return new com.onthegomap.planetiler.overture.avrogen.bbox.Builder();
  }

  /**
   * Creates a new bbox RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new bbox RecordBuilder
   */
  public static com.onthegomap.planetiler.overture.avrogen.bbox.Builder newBuilder(com.onthegomap.planetiler.overture.avrogen.bbox.Builder other) {
    if (other == null) {
      return new com.onthegomap.planetiler.overture.avrogen.bbox.Builder();
    } else {
      return new com.onthegomap.planetiler.overture.avrogen.bbox.Builder(other);
    }
  }

  /**
   * Creates a new bbox RecordBuilder by copying an existing bbox instance.
   * @param other The existing instance to copy.
   * @return A new bbox RecordBuilder
   */
  public static com.onthegomap.planetiler.overture.avrogen.bbox.Builder newBuilder(com.onthegomap.planetiler.overture.avrogen.bbox other) {
    if (other == null) {
      return new com.onthegomap.planetiler.overture.avrogen.bbox.Builder();
    } else {
      return new com.onthegomap.planetiler.overture.avrogen.bbox.Builder(other);
    }
  }

  /**
   * RecordBuilder for bbox instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<bbox>
    implements org.apache.avro.data.RecordBuilder<bbox> {

    private java.lang.Double minx;
    private java.lang.Double maxx;
    private java.lang.Double miny;
    private java.lang.Double maxy;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.onthegomap.planetiler.overture.avrogen.bbox.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.minx)) {
        this.minx = data().deepCopy(fields()[0].schema(), other.minx);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.maxx)) {
        this.maxx = data().deepCopy(fields()[1].schema(), other.maxx);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.miny)) {
        this.miny = data().deepCopy(fields()[2].schema(), other.miny);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.maxy)) {
        this.maxy = data().deepCopy(fields()[3].schema(), other.maxy);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing bbox instance
     * @param other The existing instance to copy.
     */
    private Builder(com.onthegomap.planetiler.overture.avrogen.bbox other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.minx)) {
        this.minx = data().deepCopy(fields()[0].schema(), other.minx);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.maxx)) {
        this.maxx = data().deepCopy(fields()[1].schema(), other.maxx);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.miny)) {
        this.miny = data().deepCopy(fields()[2].schema(), other.miny);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.maxy)) {
        this.maxy = data().deepCopy(fields()[3].schema(), other.maxy);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'minx' field.
      * @return The value.
      */
    public java.lang.Double getMinx() {
      return minx;
    }


    /**
      * Sets the value of the 'minx' field.
      * @param value The value of 'minx'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.bbox.Builder setMinx(java.lang.Double value) {
      validate(fields()[0], value);
      this.minx = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'minx' field has been set.
      * @return True if the 'minx' field has been set, false otherwise.
      */
    public boolean hasMinx() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'minx' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.bbox.Builder clearMinx() {
      minx = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'maxx' field.
      * @return The value.
      */
    public java.lang.Double getMaxx() {
      return maxx;
    }


    /**
      * Sets the value of the 'maxx' field.
      * @param value The value of 'maxx'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.bbox.Builder setMaxx(java.lang.Double value) {
      validate(fields()[1], value);
      this.maxx = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'maxx' field has been set.
      * @return True if the 'maxx' field has been set, false otherwise.
      */
    public boolean hasMaxx() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'maxx' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.bbox.Builder clearMaxx() {
      maxx = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'miny' field.
      * @return The value.
      */
    public java.lang.Double getMiny() {
      return miny;
    }


    /**
      * Sets the value of the 'miny' field.
      * @param value The value of 'miny'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.bbox.Builder setMiny(java.lang.Double value) {
      validate(fields()[2], value);
      this.miny = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'miny' field has been set.
      * @return True if the 'miny' field has been set, false otherwise.
      */
    public boolean hasMiny() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'miny' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.bbox.Builder clearMiny() {
      miny = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'maxy' field.
      * @return The value.
      */
    public java.lang.Double getMaxy() {
      return maxy;
    }


    /**
      * Sets the value of the 'maxy' field.
      * @param value The value of 'maxy'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.bbox.Builder setMaxy(java.lang.Double value) {
      validate(fields()[3], value);
      this.maxy = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'maxy' field has been set.
      * @return True if the 'maxy' field has been set, false otherwise.
      */
    public boolean hasMaxy() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'maxy' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.bbox.Builder clearMaxy() {
      maxy = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public bbox build() {
      try {
        bbox record = new bbox();
        record.minx = fieldSetFlags()[0] ? this.minx : (java.lang.Double) defaultValue(fields()[0]);
        record.maxx = fieldSetFlags()[1] ? this.maxx : (java.lang.Double) defaultValue(fields()[1]);
        record.miny = fieldSetFlags()[2] ? this.miny : (java.lang.Double) defaultValue(fields()[2]);
        record.maxy = fieldSetFlags()[3] ? this.maxy : (java.lang.Double) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<bbox>
    WRITER$ = (org.apache.avro.io.DatumWriter<bbox>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<bbox>
    READER$ = (org.apache.avro.io.DatumReader<bbox>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.minx == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.minx);
    }

    if (this.maxx == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.maxx);
    }

    if (this.miny == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.miny);
    }

    if (this.maxy == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.maxy);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.minx = null;
      } else {
        this.minx = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.maxx = null;
      } else {
        this.maxx = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.miny = null;
      } else {
        this.miny = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.maxy = null;
      } else {
        this.maxy = in.readDouble();
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.minx = null;
          } else {
            this.minx = in.readDouble();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.maxx = null;
          } else {
            this.maxx = in.readDouble();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.miny = null;
          } else {
            this.miny = in.readDouble();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.maxy = null;
          } else {
            this.maxy = in.readDouble();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










