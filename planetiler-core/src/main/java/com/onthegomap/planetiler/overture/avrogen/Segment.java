/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.onthegomap.planetiler.overture.avrogen;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Segment extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1827246528344805740L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Segment\",\"namespace\":\"com.onthegomap.planetiler.overture.avrogen\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"updatetime\",\"type\":[\"null\",{\"type\":\"fixed\",\"name\":\"INT96\",\"doc\":\"INT96 represented as byte[12]\",\"size\":12}],\"default\":null},{\"name\":\"version\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"level\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"subtype\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"connectors\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"bag\",\"fields\":[{\"name\":\"array_element\",\"type\":[\"null\",\"string\"],\"default\":null}]}}],\"default\":null},{\"name\":\"road\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"sources\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"bag\",\"namespace\":\"bag2\",\"fields\":[{\"name\":\"array_element\",\"type\":[\"null\",{\"type\":\"map\",\"values\":[\"null\",\"string\"]}],\"default\":null}]}}],\"default\":null},{\"name\":\"bbox\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"bbox\",\"fields\":[{\"name\":\"minx\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"maxx\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"miny\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"maxy\",\"type\":[\"null\",\"double\"],\"default\":null}]}],\"default\":null},{\"name\":\"geometry\",\"type\":[\"null\",\"bytes\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Segment> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Segment> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Segment> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Segment> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Segment> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Segment to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Segment from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Segment instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Segment fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence id;
  private com.onthegomap.planetiler.overture.avrogen.INT96 updatetime;
  private java.lang.Integer version;
  private java.lang.Integer level;
  private java.lang.CharSequence subtype;
  private java.util.List<com.onthegomap.planetiler.overture.avrogen.bag> connectors;
  private java.lang.CharSequence road;
  private java.util.List<bag2.bag> sources;
  private com.onthegomap.planetiler.overture.avrogen.bbox bbox;
  private java.nio.ByteBuffer geometry;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Segment() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param updatetime The new value for updatetime
   * @param version The new value for version
   * @param level The new value for level
   * @param subtype The new value for subtype
   * @param connectors The new value for connectors
   * @param road The new value for road
   * @param sources The new value for sources
   * @param bbox The new value for bbox
   * @param geometry The new value for geometry
   */
  public Segment(java.lang.CharSequence id, com.onthegomap.planetiler.overture.avrogen.INT96 updatetime, java.lang.Integer version, java.lang.Integer level, java.lang.CharSequence subtype, java.util.List<com.onthegomap.planetiler.overture.avrogen.bag> connectors, java.lang.CharSequence road, java.util.List<bag2.bag> sources, com.onthegomap.planetiler.overture.avrogen.bbox bbox, java.nio.ByteBuffer geometry) {
    this.id = id;
    this.updatetime = updatetime;
    this.version = version;
    this.level = level;
    this.subtype = subtype;
    this.connectors = connectors;
    this.road = road;
    this.sources = sources;
    this.bbox = bbox;
    this.geometry = geometry;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return updatetime;
    case 2: return version;
    case 3: return level;
    case 4: return subtype;
    case 5: return connectors;
    case 6: return road;
    case 7: return sources;
    case 8: return bbox;
    case 9: return geometry;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: updatetime = (com.onthegomap.planetiler.overture.avrogen.INT96)value$; break;
    case 2: version = (java.lang.Integer)value$; break;
    case 3: level = (java.lang.Integer)value$; break;
    case 4: subtype = (java.lang.CharSequence)value$; break;
    case 5: connectors = (java.util.List<com.onthegomap.planetiler.overture.avrogen.bag>)value$; break;
    case 6: road = (java.lang.CharSequence)value$; break;
    case 7: sources = (java.util.List<bag2.bag>)value$; break;
    case 8: bbox = (com.onthegomap.planetiler.overture.avrogen.bbox)value$; break;
    case 9: geometry = (java.nio.ByteBuffer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'updatetime' field.
   * @return The value of the 'updatetime' field.
   */
  public com.onthegomap.planetiler.overture.avrogen.INT96 getUpdatetime() {
    return updatetime;
  }


  /**
   * Sets the value of the 'updatetime' field.
   * @param value the value to set.
   */
  public void setUpdatetime(com.onthegomap.planetiler.overture.avrogen.INT96 value) {
    this.updatetime = value;
  }

  /**
   * Gets the value of the 'version' field.
   * @return The value of the 'version' field.
   */
  public java.lang.Integer getVersion() {
    return version;
  }


  /**
   * Sets the value of the 'version' field.
   * @param value the value to set.
   */
  public void setVersion(java.lang.Integer value) {
    this.version = value;
  }

  /**
   * Gets the value of the 'level' field.
   * @return The value of the 'level' field.
   */
  public java.lang.Integer getLevel() {
    return level;
  }


  /**
   * Sets the value of the 'level' field.
   * @param value the value to set.
   */
  public void setLevel(java.lang.Integer value) {
    this.level = value;
  }

  /**
   * Gets the value of the 'subtype' field.
   * @return The value of the 'subtype' field.
   */
  public java.lang.CharSequence getSubtype() {
    return subtype;
  }


  /**
   * Sets the value of the 'subtype' field.
   * @param value the value to set.
   */
  public void setSubtype(java.lang.CharSequence value) {
    this.subtype = value;
  }

  /**
   * Gets the value of the 'connectors' field.
   * @return The value of the 'connectors' field.
   */
  public java.util.List<com.onthegomap.planetiler.overture.avrogen.bag> getConnectors() {
    return connectors;
  }


  /**
   * Sets the value of the 'connectors' field.
   * @param value the value to set.
   */
  public void setConnectors(java.util.List<com.onthegomap.planetiler.overture.avrogen.bag> value) {
    this.connectors = value;
  }

  /**
   * Gets the value of the 'road' field.
   * @return The value of the 'road' field.
   */
  public java.lang.CharSequence getRoad() {
    return road;
  }


  /**
   * Sets the value of the 'road' field.
   * @param value the value to set.
   */
  public void setRoad(java.lang.CharSequence value) {
    this.road = value;
  }

  /**
   * Gets the value of the 'sources' field.
   * @return The value of the 'sources' field.
   */
  public java.util.List<bag2.bag> getSources() {
    return sources;
  }


  /**
   * Sets the value of the 'sources' field.
   * @param value the value to set.
   */
  public void setSources(java.util.List<bag2.bag> value) {
    this.sources = value;
  }

  /**
   * Gets the value of the 'bbox' field.
   * @return The value of the 'bbox' field.
   */
  public com.onthegomap.planetiler.overture.avrogen.bbox getBbox() {
    return bbox;
  }


  /**
   * Sets the value of the 'bbox' field.
   * @param value the value to set.
   */
  public void setBbox(com.onthegomap.planetiler.overture.avrogen.bbox value) {
    this.bbox = value;
  }

  /**
   * Gets the value of the 'geometry' field.
   * @return The value of the 'geometry' field.
   */
  public java.nio.ByteBuffer getGeometry() {
    return geometry;
  }


  /**
   * Sets the value of the 'geometry' field.
   * @param value the value to set.
   */
  public void setGeometry(java.nio.ByteBuffer value) {
    this.geometry = value;
  }

  /**
   * Creates a new Segment RecordBuilder.
   * @return A new Segment RecordBuilder
   */
  public static com.onthegomap.planetiler.overture.avrogen.Segment.Builder newBuilder() {
    return new com.onthegomap.planetiler.overture.avrogen.Segment.Builder();
  }

  /**
   * Creates a new Segment RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Segment RecordBuilder
   */
  public static com.onthegomap.planetiler.overture.avrogen.Segment.Builder newBuilder(com.onthegomap.planetiler.overture.avrogen.Segment.Builder other) {
    if (other == null) {
      return new com.onthegomap.planetiler.overture.avrogen.Segment.Builder();
    } else {
      return new com.onthegomap.planetiler.overture.avrogen.Segment.Builder(other);
    }
  }

  /**
   * Creates a new Segment RecordBuilder by copying an existing Segment instance.
   * @param other The existing instance to copy.
   * @return A new Segment RecordBuilder
   */
  public static com.onthegomap.planetiler.overture.avrogen.Segment.Builder newBuilder(com.onthegomap.planetiler.overture.avrogen.Segment other) {
    if (other == null) {
      return new com.onthegomap.planetiler.overture.avrogen.Segment.Builder();
    } else {
      return new com.onthegomap.planetiler.overture.avrogen.Segment.Builder(other);
    }
  }

  /**
   * RecordBuilder for Segment instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Segment>
    implements org.apache.avro.data.RecordBuilder<Segment> {

    private java.lang.CharSequence id;
    private com.onthegomap.planetiler.overture.avrogen.INT96 updatetime;
    private java.lang.Integer version;
    private java.lang.Integer level;
    private java.lang.CharSequence subtype;
    private java.util.List<com.onthegomap.planetiler.overture.avrogen.bag> connectors;
    private java.lang.CharSequence road;
    private java.util.List<bag2.bag> sources;
    private com.onthegomap.planetiler.overture.avrogen.bbox bbox;
    private com.onthegomap.planetiler.overture.avrogen.bbox.Builder bboxBuilder;
    private java.nio.ByteBuffer geometry;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.onthegomap.planetiler.overture.avrogen.Segment.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.updatetime)) {
        this.updatetime = data().deepCopy(fields()[1].schema(), other.updatetime);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.version)) {
        this.version = data().deepCopy(fields()[2].schema(), other.version);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.level)) {
        this.level = data().deepCopy(fields()[3].schema(), other.level);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.subtype)) {
        this.subtype = data().deepCopy(fields()[4].schema(), other.subtype);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.connectors)) {
        this.connectors = data().deepCopy(fields()[5].schema(), other.connectors);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.road)) {
        this.road = data().deepCopy(fields()[6].schema(), other.road);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.sources)) {
        this.sources = data().deepCopy(fields()[7].schema(), other.sources);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.bbox)) {
        this.bbox = data().deepCopy(fields()[8].schema(), other.bbox);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (other.hasBboxBuilder()) {
        this.bboxBuilder = com.onthegomap.planetiler.overture.avrogen.bbox.newBuilder(other.getBboxBuilder());
      }
      if (isValidValue(fields()[9], other.geometry)) {
        this.geometry = data().deepCopy(fields()[9].schema(), other.geometry);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing Segment instance
     * @param other The existing instance to copy.
     */
    private Builder(com.onthegomap.planetiler.overture.avrogen.Segment other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.updatetime)) {
        this.updatetime = data().deepCopy(fields()[1].schema(), other.updatetime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.version)) {
        this.version = data().deepCopy(fields()[2].schema(), other.version);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.level)) {
        this.level = data().deepCopy(fields()[3].schema(), other.level);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.subtype)) {
        this.subtype = data().deepCopy(fields()[4].schema(), other.subtype);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.connectors)) {
        this.connectors = data().deepCopy(fields()[5].schema(), other.connectors);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.road)) {
        this.road = data().deepCopy(fields()[6].schema(), other.road);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.sources)) {
        this.sources = data().deepCopy(fields()[7].schema(), other.sources);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.bbox)) {
        this.bbox = data().deepCopy(fields()[8].schema(), other.bbox);
        fieldSetFlags()[8] = true;
      }
      this.bboxBuilder = null;
      if (isValidValue(fields()[9], other.geometry)) {
        this.geometry = data().deepCopy(fields()[9].schema(), other.geometry);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Segment.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Segment.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'updatetime' field.
      * @return The value.
      */
    public com.onthegomap.planetiler.overture.avrogen.INT96 getUpdatetime() {
      return updatetime;
    }


    /**
      * Sets the value of the 'updatetime' field.
      * @param value The value of 'updatetime'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Segment.Builder setUpdatetime(com.onthegomap.planetiler.overture.avrogen.INT96 value) {
      validate(fields()[1], value);
      this.updatetime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'updatetime' field has been set.
      * @return True if the 'updatetime' field has been set, false otherwise.
      */
    public boolean hasUpdatetime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'updatetime' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Segment.Builder clearUpdatetime() {
      updatetime = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'version' field.
      * @return The value.
      */
    public java.lang.Integer getVersion() {
      return version;
    }


    /**
      * Sets the value of the 'version' field.
      * @param value The value of 'version'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Segment.Builder setVersion(java.lang.Integer value) {
      validate(fields()[2], value);
      this.version = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'version' field has been set.
      * @return True if the 'version' field has been set, false otherwise.
      */
    public boolean hasVersion() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'version' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Segment.Builder clearVersion() {
      version = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'level' field.
      * @return The value.
      */
    public java.lang.Integer getLevel() {
      return level;
    }


    /**
      * Sets the value of the 'level' field.
      * @param value The value of 'level'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Segment.Builder setLevel(java.lang.Integer value) {
      validate(fields()[3], value);
      this.level = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'level' field has been set.
      * @return True if the 'level' field has been set, false otherwise.
      */
    public boolean hasLevel() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'level' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Segment.Builder clearLevel() {
      level = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'subtype' field.
      * @return The value.
      */
    public java.lang.CharSequence getSubtype() {
      return subtype;
    }


    /**
      * Sets the value of the 'subtype' field.
      * @param value The value of 'subtype'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Segment.Builder setSubtype(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.subtype = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'subtype' field has been set.
      * @return True if the 'subtype' field has been set, false otherwise.
      */
    public boolean hasSubtype() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'subtype' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Segment.Builder clearSubtype() {
      subtype = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'connectors' field.
      * @return The value.
      */
    public java.util.List<com.onthegomap.planetiler.overture.avrogen.bag> getConnectors() {
      return connectors;
    }


    /**
      * Sets the value of the 'connectors' field.
      * @param value The value of 'connectors'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Segment.Builder setConnectors(java.util.List<com.onthegomap.planetiler.overture.avrogen.bag> value) {
      validate(fields()[5], value);
      this.connectors = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'connectors' field has been set.
      * @return True if the 'connectors' field has been set, false otherwise.
      */
    public boolean hasConnectors() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'connectors' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Segment.Builder clearConnectors() {
      connectors = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'road' field.
      * @return The value.
      */
    public java.lang.CharSequence getRoad() {
      return road;
    }


    /**
      * Sets the value of the 'road' field.
      * @param value The value of 'road'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Segment.Builder setRoad(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.road = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'road' field has been set.
      * @return True if the 'road' field has been set, false otherwise.
      */
    public boolean hasRoad() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'road' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Segment.Builder clearRoad() {
      road = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'sources' field.
      * @return The value.
      */
    public java.util.List<bag2.bag> getSources() {
      return sources;
    }


    /**
      * Sets the value of the 'sources' field.
      * @param value The value of 'sources'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Segment.Builder setSources(java.util.List<bag2.bag> value) {
      validate(fields()[7], value);
      this.sources = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'sources' field has been set.
      * @return True if the 'sources' field has been set, false otherwise.
      */
    public boolean hasSources() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'sources' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Segment.Builder clearSources() {
      sources = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'bbox' field.
      * @return The value.
      */
    public com.onthegomap.planetiler.overture.avrogen.bbox getBbox() {
      return bbox;
    }


    /**
      * Sets the value of the 'bbox' field.
      * @param value The value of 'bbox'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Segment.Builder setBbox(com.onthegomap.planetiler.overture.avrogen.bbox value) {
      validate(fields()[8], value);
      this.bboxBuilder = null;
      this.bbox = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'bbox' field has been set.
      * @return True if the 'bbox' field has been set, false otherwise.
      */
    public boolean hasBbox() {
      return fieldSetFlags()[8];
    }

    /**
     * Gets the Builder instance for the 'bbox' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.onthegomap.planetiler.overture.avrogen.bbox.Builder getBboxBuilder() {
      if (bboxBuilder == null) {
        if (hasBbox()) {
          setBboxBuilder(com.onthegomap.planetiler.overture.avrogen.bbox.newBuilder(bbox));
        } else {
          setBboxBuilder(com.onthegomap.planetiler.overture.avrogen.bbox.newBuilder());
        }
      }
      return bboxBuilder;
    }

    /**
     * Sets the Builder instance for the 'bbox' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.onthegomap.planetiler.overture.avrogen.Segment.Builder setBboxBuilder(com.onthegomap.planetiler.overture.avrogen.bbox.Builder value) {
      clearBbox();
      bboxBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'bbox' field has an active Builder instance
     * @return True if the 'bbox' field has an active Builder instance
     */
    public boolean hasBboxBuilder() {
      return bboxBuilder != null;
    }

    /**
      * Clears the value of the 'bbox' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Segment.Builder clearBbox() {
      bbox = null;
      bboxBuilder = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'geometry' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getGeometry() {
      return geometry;
    }


    /**
      * Sets the value of the 'geometry' field.
      * @param value The value of 'geometry'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Segment.Builder setGeometry(java.nio.ByteBuffer value) {
      validate(fields()[9], value);
      this.geometry = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'geometry' field has been set.
      * @return True if the 'geometry' field has been set, false otherwise.
      */
    public boolean hasGeometry() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'geometry' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Segment.Builder clearGeometry() {
      geometry = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Segment build() {
      try {
        Segment record = new Segment();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.updatetime = fieldSetFlags()[1] ? this.updatetime : (com.onthegomap.planetiler.overture.avrogen.INT96) defaultValue(fields()[1]);
        record.version = fieldSetFlags()[2] ? this.version : (java.lang.Integer) defaultValue(fields()[2]);
        record.level = fieldSetFlags()[3] ? this.level : (java.lang.Integer) defaultValue(fields()[3]);
        record.subtype = fieldSetFlags()[4] ? this.subtype : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.connectors = fieldSetFlags()[5] ? this.connectors : (java.util.List<com.onthegomap.planetiler.overture.avrogen.bag>) defaultValue(fields()[5]);
        record.road = fieldSetFlags()[6] ? this.road : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.sources = fieldSetFlags()[7] ? this.sources : (java.util.List<bag2.bag>) defaultValue(fields()[7]);
        if (bboxBuilder != null) {
          try {
            record.bbox = this.bboxBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("bbox"));
            throw e;
          }
        } else {
          record.bbox = fieldSetFlags()[8] ? this.bbox : (com.onthegomap.planetiler.overture.avrogen.bbox) defaultValue(fields()[8]);
        }
        record.geometry = fieldSetFlags()[9] ? this.geometry : (java.nio.ByteBuffer) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Segment>
    WRITER$ = (org.apache.avro.io.DatumWriter<Segment>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Segment>
    READER$ = (org.apache.avro.io.DatumReader<Segment>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.id);
    }

    if (this.updatetime == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeFixed(this.updatetime.bytes(), 0, 12);
    }

    if (this.version == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.version);
    }

    if (this.level == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.level);
    }

    if (this.subtype == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.subtype);
    }

    if (this.connectors == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.connectors.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (com.onthegomap.planetiler.overture.avrogen.bag e0: this.connectors) {
        actualSize0++;
        out.startItem();
        e0.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.road == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.road);
    }

    if (this.sources == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size1 = this.sources.size();
      out.writeArrayStart();
      out.setItemCount(size1);
      long actualSize1 = 0;
      for (bag2.bag e1: this.sources) {
        actualSize1++;
        out.startItem();
        e1.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize1 != size1)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");
    }

    if (this.bbox == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.bbox.customEncode(out);
    }

    if (this.geometry == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBytes(this.geometry);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.id = null;
      } else {
        this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.updatetime = null;
      } else {
        if (this.updatetime == null) {
          this.updatetime = new com.onthegomap.planetiler.overture.avrogen.INT96();
        }
        in.readFixed(this.updatetime.bytes(), 0, 12);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.version = null;
      } else {
        this.version = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.level = null;
      } else {
        this.level = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.subtype = null;
      } else {
        this.subtype = in.readString(this.subtype instanceof Utf8 ? (Utf8)this.subtype : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.connectors = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<com.onthegomap.planetiler.overture.avrogen.bag> a0 = this.connectors;
        if (a0 == null) {
          a0 = new SpecificData.Array<com.onthegomap.planetiler.overture.avrogen.bag>((int)size0, SCHEMA$.getField("connectors").schema().getTypes().get(1));
          this.connectors = a0;
        } else a0.clear();
        SpecificData.Array<com.onthegomap.planetiler.overture.avrogen.bag> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.onthegomap.planetiler.overture.avrogen.bag>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            com.onthegomap.planetiler.overture.avrogen.bag e0 = (ga0 != null ? ga0.peek() : null);
            if (e0 == null) {
              e0 = new com.onthegomap.planetiler.overture.avrogen.bag();
            }
            e0.customDecode(in);
            a0.add(e0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.road = null;
      } else {
        this.road = in.readString(this.road instanceof Utf8 ? (Utf8)this.road : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.sources = null;
      } else {
        long size1 = in.readArrayStart();
        java.util.List<bag2.bag> a1 = this.sources;
        if (a1 == null) {
          a1 = new SpecificData.Array<bag2.bag>((int)size1, SCHEMA$.getField("sources").schema().getTypes().get(1));
          this.sources = a1;
        } else a1.clear();
        SpecificData.Array<bag2.bag> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<bag2.bag>)a1 : null);
        for ( ; 0 < size1; size1 = in.arrayNext()) {
          for ( ; size1 != 0; size1--) {
            bag2.bag e1 = (ga1 != null ? ga1.peek() : null);
            if (e1 == null) {
              e1 = new bag2.bag();
            }
            e1.customDecode(in);
            a1.add(e1);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bbox = null;
      } else {
        if (this.bbox == null) {
          this.bbox = new com.onthegomap.planetiler.overture.avrogen.bbox();
        }
        this.bbox.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.geometry = null;
      } else {
        this.geometry = in.readBytes(this.geometry);
      }

    } else {
      for (int i = 0; i < 10; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id = null;
          } else {
            this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.updatetime = null;
          } else {
            if (this.updatetime == null) {
              this.updatetime = new com.onthegomap.planetiler.overture.avrogen.INT96();
            }
            in.readFixed(this.updatetime.bytes(), 0, 12);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.version = null;
          } else {
            this.version = in.readInt();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.level = null;
          } else {
            this.level = in.readInt();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.subtype = null;
          } else {
            this.subtype = in.readString(this.subtype instanceof Utf8 ? (Utf8)this.subtype : null);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.connectors = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<com.onthegomap.planetiler.overture.avrogen.bag> a0 = this.connectors;
            if (a0 == null) {
              a0 = new SpecificData.Array<com.onthegomap.planetiler.overture.avrogen.bag>((int)size0, SCHEMA$.getField("connectors").schema().getTypes().get(1));
              this.connectors = a0;
            } else a0.clear();
            SpecificData.Array<com.onthegomap.planetiler.overture.avrogen.bag> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.onthegomap.planetiler.overture.avrogen.bag>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                com.onthegomap.planetiler.overture.avrogen.bag e0 = (ga0 != null ? ga0.peek() : null);
                if (e0 == null) {
                  e0 = new com.onthegomap.planetiler.overture.avrogen.bag();
                }
                e0.customDecode(in);
                a0.add(e0);
              }
            }
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.road = null;
          } else {
            this.road = in.readString(this.road instanceof Utf8 ? (Utf8)this.road : null);
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sources = null;
          } else {
            long size1 = in.readArrayStart();
            java.util.List<bag2.bag> a1 = this.sources;
            if (a1 == null) {
              a1 = new SpecificData.Array<bag2.bag>((int)size1, SCHEMA$.getField("sources").schema().getTypes().get(1));
              this.sources = a1;
            } else a1.clear();
            SpecificData.Array<bag2.bag> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<bag2.bag>)a1 : null);
            for ( ; 0 < size1; size1 = in.arrayNext()) {
              for ( ; size1 != 0; size1--) {
                bag2.bag e1 = (ga1 != null ? ga1.peek() : null);
                if (e1 == null) {
                  e1 = new bag2.bag();
                }
                e1.customDecode(in);
                a1.add(e1);
              }
            }
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bbox = null;
          } else {
            if (this.bbox == null) {
              this.bbox = new com.onthegomap.planetiler.overture.avrogen.bbox();
            }
            this.bbox.customDecode(in);
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.geometry = null;
          } else {
            this.geometry = in.readBytes(this.geometry);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










