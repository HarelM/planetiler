/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.onthegomap.planetiler.overture.avrogen;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Building extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4851230972601236602L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Building\",\"namespace\":\"com.onthegomap.planetiler.overture.avrogen\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"updatetime\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"version\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"names\",\"type\":[\"null\",{\"type\":\"map\",\"values\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"bag\",\"fields\":[{\"name\":\"array_element\",\"type\":[\"null\",{\"type\":\"map\",\"values\":[\"null\",\"string\"]}],\"default\":null}]}}]}],\"default\":null},{\"name\":\"level\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"height\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"numfloors\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"class\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"sources\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"bag\",\"namespace\":\"bag2\",\"fields\":[{\"name\":\"array_element\",\"type\":[\"null\",{\"type\":\"map\",\"values\":[\"null\",\"string\"]}],\"default\":null}]}}],\"default\":null},{\"name\":\"bbox\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"bbox\",\"fields\":[{\"name\":\"minx\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"maxx\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"miny\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"maxy\",\"type\":[\"null\",\"double\"],\"default\":null}]}],\"default\":null},{\"name\":\"geometry\",\"type\":[\"null\",\"bytes\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Building> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Building> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Building> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Building> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Building> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Building to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Building from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Building instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Building fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence id;
  private java.lang.CharSequence updatetime;
  private java.lang.Integer version;
  private java.util.Map<java.lang.CharSequence,java.util.List<com.onthegomap.planetiler.overture.avrogen.bag>> names;
  private java.lang.Integer level;
  private java.lang.Double height;
  private java.lang.Integer numfloors;
  private java.lang.CharSequence class$;
  private java.util.List<bag2.bag> sources;
  private com.onthegomap.planetiler.overture.avrogen.bbox bbox;
  private java.nio.ByteBuffer geometry;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Building() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param updatetime The new value for updatetime
   * @param version The new value for version
   * @param names The new value for names
   * @param level The new value for level
   * @param height The new value for height
   * @param numfloors The new value for numfloors
   * @param class$ The new value for class
   * @param sources The new value for sources
   * @param bbox The new value for bbox
   * @param geometry The new value for geometry
   */
  public Building(java.lang.CharSequence id, java.lang.CharSequence updatetime, java.lang.Integer version, java.util.Map<java.lang.CharSequence,java.util.List<com.onthegomap.planetiler.overture.avrogen.bag>> names, java.lang.Integer level, java.lang.Double height, java.lang.Integer numfloors, java.lang.CharSequence class$, java.util.List<bag2.bag> sources, com.onthegomap.planetiler.overture.avrogen.bbox bbox, java.nio.ByteBuffer geometry) {
    this.id = id;
    this.updatetime = updatetime;
    this.version = version;
    this.names = names;
    this.level = level;
    this.height = height;
    this.numfloors = numfloors;
    this.class$ = class$;
    this.sources = sources;
    this.bbox = bbox;
    this.geometry = geometry;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return updatetime;
    case 2: return version;
    case 3: return names;
    case 4: return level;
    case 5: return height;
    case 6: return numfloors;
    case 7: return class$;
    case 8: return sources;
    case 9: return bbox;
    case 10: return geometry;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: updatetime = (java.lang.CharSequence)value$; break;
    case 2: version = (java.lang.Integer)value$; break;
    case 3: names = (java.util.Map<java.lang.CharSequence,java.util.List<com.onthegomap.planetiler.overture.avrogen.bag>>)value$; break;
    case 4: level = (java.lang.Integer)value$; break;
    case 5: height = (java.lang.Double)value$; break;
    case 6: numfloors = (java.lang.Integer)value$; break;
    case 7: class$ = (java.lang.CharSequence)value$; break;
    case 8: sources = (java.util.List<bag2.bag>)value$; break;
    case 9: bbox = (com.onthegomap.planetiler.overture.avrogen.bbox)value$; break;
    case 10: geometry = (java.nio.ByteBuffer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'updatetime' field.
   * @return The value of the 'updatetime' field.
   */
  public java.lang.CharSequence getUpdatetime() {
    return updatetime;
  }


  /**
   * Sets the value of the 'updatetime' field.
   * @param value the value to set.
   */
  public void setUpdatetime(java.lang.CharSequence value) {
    this.updatetime = value;
  }

  /**
   * Gets the value of the 'version' field.
   * @return The value of the 'version' field.
   */
  public java.lang.Integer getVersion() {
    return version;
  }


  /**
   * Sets the value of the 'version' field.
   * @param value the value to set.
   */
  public void setVersion(java.lang.Integer value) {
    this.version = value;
  }

  /**
   * Gets the value of the 'names' field.
   * @return The value of the 'names' field.
   */
  public java.util.Map<java.lang.CharSequence,java.util.List<com.onthegomap.planetiler.overture.avrogen.bag>> getNames() {
    return names;
  }


  /**
   * Sets the value of the 'names' field.
   * @param value the value to set.
   */
  public void setNames(java.util.Map<java.lang.CharSequence,java.util.List<com.onthegomap.planetiler.overture.avrogen.bag>> value) {
    this.names = value;
  }

  /**
   * Gets the value of the 'level' field.
   * @return The value of the 'level' field.
   */
  public java.lang.Integer getLevel() {
    return level;
  }


  /**
   * Sets the value of the 'level' field.
   * @param value the value to set.
   */
  public void setLevel(java.lang.Integer value) {
    this.level = value;
  }

  /**
   * Gets the value of the 'height' field.
   * @return The value of the 'height' field.
   */
  public java.lang.Double getHeight() {
    return height;
  }


  /**
   * Sets the value of the 'height' field.
   * @param value the value to set.
   */
  public void setHeight(java.lang.Double value) {
    this.height = value;
  }

  /**
   * Gets the value of the 'numfloors' field.
   * @return The value of the 'numfloors' field.
   */
  public java.lang.Integer getNumfloors() {
    return numfloors;
  }


  /**
   * Sets the value of the 'numfloors' field.
   * @param value the value to set.
   */
  public void setNumfloors(java.lang.Integer value) {
    this.numfloors = value;
  }

  /**
   * Gets the value of the 'class$' field.
   * @return The value of the 'class$' field.
   */
  public java.lang.CharSequence getClass$() {
    return class$;
  }


  /**
   * Sets the value of the 'class$' field.
   * @param value the value to set.
   */
  public void setClass$(java.lang.CharSequence value) {
    this.class$ = value;
  }

  /**
   * Gets the value of the 'sources' field.
   * @return The value of the 'sources' field.
   */
  public java.util.List<bag2.bag> getSources() {
    return sources;
  }


  /**
   * Sets the value of the 'sources' field.
   * @param value the value to set.
   */
  public void setSources(java.util.List<bag2.bag> value) {
    this.sources = value;
  }

  /**
   * Gets the value of the 'bbox' field.
   * @return The value of the 'bbox' field.
   */
  public com.onthegomap.planetiler.overture.avrogen.bbox getBbox() {
    return bbox;
  }


  /**
   * Sets the value of the 'bbox' field.
   * @param value the value to set.
   */
  public void setBbox(com.onthegomap.planetiler.overture.avrogen.bbox value) {
    this.bbox = value;
  }

  /**
   * Gets the value of the 'geometry' field.
   * @return The value of the 'geometry' field.
   */
  public java.nio.ByteBuffer getGeometry() {
    return geometry;
  }


  /**
   * Sets the value of the 'geometry' field.
   * @param value the value to set.
   */
  public void setGeometry(java.nio.ByteBuffer value) {
    this.geometry = value;
  }

  /**
   * Creates a new Building RecordBuilder.
   * @return A new Building RecordBuilder
   */
  public static com.onthegomap.planetiler.overture.avrogen.Building.Builder newBuilder() {
    return new com.onthegomap.planetiler.overture.avrogen.Building.Builder();
  }

  /**
   * Creates a new Building RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Building RecordBuilder
   */
  public static com.onthegomap.planetiler.overture.avrogen.Building.Builder newBuilder(com.onthegomap.planetiler.overture.avrogen.Building.Builder other) {
    if (other == null) {
      return new com.onthegomap.planetiler.overture.avrogen.Building.Builder();
    } else {
      return new com.onthegomap.planetiler.overture.avrogen.Building.Builder(other);
    }
  }

  /**
   * Creates a new Building RecordBuilder by copying an existing Building instance.
   * @param other The existing instance to copy.
   * @return A new Building RecordBuilder
   */
  public static com.onthegomap.planetiler.overture.avrogen.Building.Builder newBuilder(com.onthegomap.planetiler.overture.avrogen.Building other) {
    if (other == null) {
      return new com.onthegomap.planetiler.overture.avrogen.Building.Builder();
    } else {
      return new com.onthegomap.planetiler.overture.avrogen.Building.Builder(other);
    }
  }

  /**
   * RecordBuilder for Building instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Building>
    implements org.apache.avro.data.RecordBuilder<Building> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence updatetime;
    private java.lang.Integer version;
    private java.util.Map<java.lang.CharSequence,java.util.List<com.onthegomap.planetiler.overture.avrogen.bag>> names;
    private java.lang.Integer level;
    private java.lang.Double height;
    private java.lang.Integer numfloors;
    private java.lang.CharSequence class$;
    private java.util.List<bag2.bag> sources;
    private com.onthegomap.planetiler.overture.avrogen.bbox bbox;
    private com.onthegomap.planetiler.overture.avrogen.bbox.Builder bboxBuilder;
    private java.nio.ByteBuffer geometry;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.onthegomap.planetiler.overture.avrogen.Building.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.updatetime)) {
        this.updatetime = data().deepCopy(fields()[1].schema(), other.updatetime);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.version)) {
        this.version = data().deepCopy(fields()[2].schema(), other.version);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.names)) {
        this.names = data().deepCopy(fields()[3].schema(), other.names);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.level)) {
        this.level = data().deepCopy(fields()[4].schema(), other.level);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.height)) {
        this.height = data().deepCopy(fields()[5].schema(), other.height);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.numfloors)) {
        this.numfloors = data().deepCopy(fields()[6].schema(), other.numfloors);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.class$)) {
        this.class$ = data().deepCopy(fields()[7].schema(), other.class$);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.sources)) {
        this.sources = data().deepCopy(fields()[8].schema(), other.sources);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.bbox)) {
        this.bbox = data().deepCopy(fields()[9].schema(), other.bbox);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (other.hasBboxBuilder()) {
        this.bboxBuilder = com.onthegomap.planetiler.overture.avrogen.bbox.newBuilder(other.getBboxBuilder());
      }
      if (isValidValue(fields()[10], other.geometry)) {
        this.geometry = data().deepCopy(fields()[10].schema(), other.geometry);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
    }

    /**
     * Creates a Builder by copying an existing Building instance
     * @param other The existing instance to copy.
     */
    private Builder(com.onthegomap.planetiler.overture.avrogen.Building other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.updatetime)) {
        this.updatetime = data().deepCopy(fields()[1].schema(), other.updatetime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.version)) {
        this.version = data().deepCopy(fields()[2].schema(), other.version);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.names)) {
        this.names = data().deepCopy(fields()[3].schema(), other.names);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.level)) {
        this.level = data().deepCopy(fields()[4].schema(), other.level);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.height)) {
        this.height = data().deepCopy(fields()[5].schema(), other.height);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.numfloors)) {
        this.numfloors = data().deepCopy(fields()[6].schema(), other.numfloors);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.class$)) {
        this.class$ = data().deepCopy(fields()[7].schema(), other.class$);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.sources)) {
        this.sources = data().deepCopy(fields()[8].schema(), other.sources);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.bbox)) {
        this.bbox = data().deepCopy(fields()[9].schema(), other.bbox);
        fieldSetFlags()[9] = true;
      }
      this.bboxBuilder = null;
      if (isValidValue(fields()[10], other.geometry)) {
        this.geometry = data().deepCopy(fields()[10].schema(), other.geometry);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Building.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Building.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'updatetime' field.
      * @return The value.
      */
    public java.lang.CharSequence getUpdatetime() {
      return updatetime;
    }


    /**
      * Sets the value of the 'updatetime' field.
      * @param value The value of 'updatetime'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Building.Builder setUpdatetime(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.updatetime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'updatetime' field has been set.
      * @return True if the 'updatetime' field has been set, false otherwise.
      */
    public boolean hasUpdatetime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'updatetime' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Building.Builder clearUpdatetime() {
      updatetime = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'version' field.
      * @return The value.
      */
    public java.lang.Integer getVersion() {
      return version;
    }


    /**
      * Sets the value of the 'version' field.
      * @param value The value of 'version'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Building.Builder setVersion(java.lang.Integer value) {
      validate(fields()[2], value);
      this.version = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'version' field has been set.
      * @return True if the 'version' field has been set, false otherwise.
      */
    public boolean hasVersion() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'version' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Building.Builder clearVersion() {
      version = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'names' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.util.List<com.onthegomap.planetiler.overture.avrogen.bag>> getNames() {
      return names;
    }


    /**
      * Sets the value of the 'names' field.
      * @param value The value of 'names'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Building.Builder setNames(java.util.Map<java.lang.CharSequence,java.util.List<com.onthegomap.planetiler.overture.avrogen.bag>> value) {
      validate(fields()[3], value);
      this.names = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'names' field has been set.
      * @return True if the 'names' field has been set, false otherwise.
      */
    public boolean hasNames() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'names' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Building.Builder clearNames() {
      names = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'level' field.
      * @return The value.
      */
    public java.lang.Integer getLevel() {
      return level;
    }


    /**
      * Sets the value of the 'level' field.
      * @param value The value of 'level'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Building.Builder setLevel(java.lang.Integer value) {
      validate(fields()[4], value);
      this.level = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'level' field has been set.
      * @return True if the 'level' field has been set, false otherwise.
      */
    public boolean hasLevel() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'level' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Building.Builder clearLevel() {
      level = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'height' field.
      * @return The value.
      */
    public java.lang.Double getHeight() {
      return height;
    }


    /**
      * Sets the value of the 'height' field.
      * @param value The value of 'height'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Building.Builder setHeight(java.lang.Double value) {
      validate(fields()[5], value);
      this.height = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'height' field has been set.
      * @return True if the 'height' field has been set, false otherwise.
      */
    public boolean hasHeight() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'height' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Building.Builder clearHeight() {
      height = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'numfloors' field.
      * @return The value.
      */
    public java.lang.Integer getNumfloors() {
      return numfloors;
    }


    /**
      * Sets the value of the 'numfloors' field.
      * @param value The value of 'numfloors'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Building.Builder setNumfloors(java.lang.Integer value) {
      validate(fields()[6], value);
      this.numfloors = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'numfloors' field has been set.
      * @return True if the 'numfloors' field has been set, false otherwise.
      */
    public boolean hasNumfloors() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'numfloors' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Building.Builder clearNumfloors() {
      numfloors = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'class$' field.
      * @return The value.
      */
    public java.lang.CharSequence getClass$() {
      return class$;
    }


    /**
      * Sets the value of the 'class$' field.
      * @param value The value of 'class$'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Building.Builder setClass$(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.class$ = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'class$' field has been set.
      * @return True if the 'class$' field has been set, false otherwise.
      */
    public boolean hasClass$() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'class$' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Building.Builder clearClass$() {
      class$ = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'sources' field.
      * @return The value.
      */
    public java.util.List<bag2.bag> getSources() {
      return sources;
    }


    /**
      * Sets the value of the 'sources' field.
      * @param value The value of 'sources'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Building.Builder setSources(java.util.List<bag2.bag> value) {
      validate(fields()[8], value);
      this.sources = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'sources' field has been set.
      * @return True if the 'sources' field has been set, false otherwise.
      */
    public boolean hasSources() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'sources' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Building.Builder clearSources() {
      sources = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'bbox' field.
      * @return The value.
      */
    public com.onthegomap.planetiler.overture.avrogen.bbox getBbox() {
      return bbox;
    }


    /**
      * Sets the value of the 'bbox' field.
      * @param value The value of 'bbox'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Building.Builder setBbox(com.onthegomap.planetiler.overture.avrogen.bbox value) {
      validate(fields()[9], value);
      this.bboxBuilder = null;
      this.bbox = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'bbox' field has been set.
      * @return True if the 'bbox' field has been set, false otherwise.
      */
    public boolean hasBbox() {
      return fieldSetFlags()[9];
    }

    /**
     * Gets the Builder instance for the 'bbox' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.onthegomap.planetiler.overture.avrogen.bbox.Builder getBboxBuilder() {
      if (bboxBuilder == null) {
        if (hasBbox()) {
          setBboxBuilder(com.onthegomap.planetiler.overture.avrogen.bbox.newBuilder(bbox));
        } else {
          setBboxBuilder(com.onthegomap.planetiler.overture.avrogen.bbox.newBuilder());
        }
      }
      return bboxBuilder;
    }

    /**
     * Sets the Builder instance for the 'bbox' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.onthegomap.planetiler.overture.avrogen.Building.Builder setBboxBuilder(com.onthegomap.planetiler.overture.avrogen.bbox.Builder value) {
      clearBbox();
      bboxBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'bbox' field has an active Builder instance
     * @return True if the 'bbox' field has an active Builder instance
     */
    public boolean hasBboxBuilder() {
      return bboxBuilder != null;
    }

    /**
      * Clears the value of the 'bbox' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Building.Builder clearBbox() {
      bbox = null;
      bboxBuilder = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'geometry' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getGeometry() {
      return geometry;
    }


    /**
      * Sets the value of the 'geometry' field.
      * @param value The value of 'geometry'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Building.Builder setGeometry(java.nio.ByteBuffer value) {
      validate(fields()[10], value);
      this.geometry = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'geometry' field has been set.
      * @return True if the 'geometry' field has been set, false otherwise.
      */
    public boolean hasGeometry() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'geometry' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Building.Builder clearGeometry() {
      geometry = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Building build() {
      try {
        Building record = new Building();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.updatetime = fieldSetFlags()[1] ? this.updatetime : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.version = fieldSetFlags()[2] ? this.version : (java.lang.Integer) defaultValue(fields()[2]);
        record.names = fieldSetFlags()[3] ? this.names : (java.util.Map<java.lang.CharSequence,java.util.List<com.onthegomap.planetiler.overture.avrogen.bag>>) defaultValue(fields()[3]);
        record.level = fieldSetFlags()[4] ? this.level : (java.lang.Integer) defaultValue(fields()[4]);
        record.height = fieldSetFlags()[5] ? this.height : (java.lang.Double) defaultValue(fields()[5]);
        record.numfloors = fieldSetFlags()[6] ? this.numfloors : (java.lang.Integer) defaultValue(fields()[6]);
        record.class$ = fieldSetFlags()[7] ? this.class$ : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.sources = fieldSetFlags()[8] ? this.sources : (java.util.List<bag2.bag>) defaultValue(fields()[8]);
        if (bboxBuilder != null) {
          try {
            record.bbox = this.bboxBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("bbox"));
            throw e;
          }
        } else {
          record.bbox = fieldSetFlags()[9] ? this.bbox : (com.onthegomap.planetiler.overture.avrogen.bbox) defaultValue(fields()[9]);
        }
        record.geometry = fieldSetFlags()[10] ? this.geometry : (java.nio.ByteBuffer) defaultValue(fields()[10]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Building>
    WRITER$ = (org.apache.avro.io.DatumWriter<Building>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Building>
    READER$ = (org.apache.avro.io.DatumReader<Building>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.id);
    }

    if (this.updatetime == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.updatetime);
    }

    if (this.version == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.version);
    }

    if (this.names == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.names.size();
      out.writeMapStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.util.Map.Entry<java.lang.CharSequence, java.util.List<com.onthegomap.planetiler.overture.avrogen.bag>> e0: this.names.entrySet()) {
        actualSize0++;
        out.startItem();
        out.writeString(e0.getKey());
        java.util.List<com.onthegomap.planetiler.overture.avrogen.bag> v0 = e0.getValue();
        if (v0 == null) {
          out.writeIndex(0);
          out.writeNull();
        } else {
          out.writeIndex(1);
          long size1 = v0.size();
          out.writeArrayStart();
          out.setItemCount(size1);
          long actualSize1 = 0;
          for (com.onthegomap.planetiler.overture.avrogen.bag e1: v0) {
            actualSize1++;
            out.startItem();
            e1.customEncode(out);
          }
          out.writeArrayEnd();
          if (actualSize1 != size1)
            throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");
        }
      }
      out.writeMapEnd();
      if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.level == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.level);
    }

    if (this.height == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.height);
    }

    if (this.numfloors == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.numfloors);
    }

    if (this.class$ == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.class$);
    }

    if (this.sources == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size2 = this.sources.size();
      out.writeArrayStart();
      out.setItemCount(size2);
      long actualSize2 = 0;
      for (bag2.bag e2: this.sources) {
        actualSize2++;
        out.startItem();
        e2.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize2 != size2)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");
    }

    if (this.bbox == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.bbox.customEncode(out);
    }

    if (this.geometry == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBytes(this.geometry);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.id = null;
      } else {
        this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.updatetime = null;
      } else {
        this.updatetime = in.readString(this.updatetime instanceof Utf8 ? (Utf8)this.updatetime : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.version = null;
      } else {
        this.version = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.names = null;
      } else {
        long size0 = in.readMapStart();
        java.util.Map<java.lang.CharSequence,java.util.List<com.onthegomap.planetiler.overture.avrogen.bag>> m0 = this.names; // Need fresh name due to limitation of macro system
        if (m0 == null) {
          m0 = new java.util.HashMap<java.lang.CharSequence,java.util.List<com.onthegomap.planetiler.overture.avrogen.bag>>((int)size0);
          this.names = m0;
        } else m0.clear();
        for ( ; 0 < size0; size0 = in.mapNext()) {
          for ( ; size0 != 0; size0--) {
            java.lang.CharSequence k0 = null;
            k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
            java.util.List<com.onthegomap.planetiler.overture.avrogen.bag> v0 = null;
            if (in.readIndex() != 1) {
              in.readNull();
              v0 = null;
            } else {
              long size1 = in.readArrayStart();
              java.util.List<com.onthegomap.planetiler.overture.avrogen.bag> a1 = v0;
              if (a1 == null) {
                a1 = new SpecificData.Array<com.onthegomap.planetiler.overture.avrogen.bag>((int)size1, SCHEMA$.getField("names").schema().getTypes().get(1).getValueType().getTypes().get(1));
                v0 = a1;
              } else a1.clear();
              SpecificData.Array<com.onthegomap.planetiler.overture.avrogen.bag> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<com.onthegomap.planetiler.overture.avrogen.bag>)a1 : null);
              for ( ; 0 < size1; size1 = in.arrayNext()) {
                for ( ; size1 != 0; size1--) {
                  com.onthegomap.planetiler.overture.avrogen.bag e1 = (ga1 != null ? ga1.peek() : null);
                  if (e1 == null) {
                    e1 = new com.onthegomap.planetiler.overture.avrogen.bag();
                  }
                  e1.customDecode(in);
                  a1.add(e1);
                }
              }
            }
            m0.put(k0, v0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.level = null;
      } else {
        this.level = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.height = null;
      } else {
        this.height = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.numfloors = null;
      } else {
        this.numfloors = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.class$ = null;
      } else {
        this.class$ = in.readString(this.class$ instanceof Utf8 ? (Utf8)this.class$ : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.sources = null;
      } else {
        long size2 = in.readArrayStart();
        java.util.List<bag2.bag> a2 = this.sources;
        if (a2 == null) {
          a2 = new SpecificData.Array<bag2.bag>((int)size2, SCHEMA$.getField("sources").schema().getTypes().get(1));
          this.sources = a2;
        } else a2.clear();
        SpecificData.Array<bag2.bag> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<bag2.bag>)a2 : null);
        for ( ; 0 < size2; size2 = in.arrayNext()) {
          for ( ; size2 != 0; size2--) {
            bag2.bag e2 = (ga2 != null ? ga2.peek() : null);
            if (e2 == null) {
              e2 = new bag2.bag();
            }
            e2.customDecode(in);
            a2.add(e2);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bbox = null;
      } else {
        if (this.bbox == null) {
          this.bbox = new com.onthegomap.planetiler.overture.avrogen.bbox();
        }
        this.bbox.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.geometry = null;
      } else {
        this.geometry = in.readBytes(this.geometry);
      }

    } else {
      for (int i = 0; i < 11; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id = null;
          } else {
            this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.updatetime = null;
          } else {
            this.updatetime = in.readString(this.updatetime instanceof Utf8 ? (Utf8)this.updatetime : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.version = null;
          } else {
            this.version = in.readInt();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.names = null;
          } else {
            long size0 = in.readMapStart();
            java.util.Map<java.lang.CharSequence,java.util.List<com.onthegomap.planetiler.overture.avrogen.bag>> m0 = this.names; // Need fresh name due to limitation of macro system
            if (m0 == null) {
              m0 = new java.util.HashMap<java.lang.CharSequence,java.util.List<com.onthegomap.planetiler.overture.avrogen.bag>>((int)size0);
              this.names = m0;
            } else m0.clear();
            for ( ; 0 < size0; size0 = in.mapNext()) {
              for ( ; size0 != 0; size0--) {
                java.lang.CharSequence k0 = null;
                k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
                java.util.List<com.onthegomap.planetiler.overture.avrogen.bag> v0 = null;
                if (in.readIndex() != 1) {
                  in.readNull();
                  v0 = null;
                } else {
                  long size1 = in.readArrayStart();
                  java.util.List<com.onthegomap.planetiler.overture.avrogen.bag> a1 = v0;
                  if (a1 == null) {
                    a1 = new SpecificData.Array<com.onthegomap.planetiler.overture.avrogen.bag>((int)size1, SCHEMA$.getField("names").schema().getTypes().get(1).getValueType().getTypes().get(1));
                    v0 = a1;
                  } else a1.clear();
                  SpecificData.Array<com.onthegomap.planetiler.overture.avrogen.bag> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<com.onthegomap.planetiler.overture.avrogen.bag>)a1 : null);
                  for ( ; 0 < size1; size1 = in.arrayNext()) {
                    for ( ; size1 != 0; size1--) {
                      com.onthegomap.planetiler.overture.avrogen.bag e1 = (ga1 != null ? ga1.peek() : null);
                      if (e1 == null) {
                        e1 = new com.onthegomap.planetiler.overture.avrogen.bag();
                      }
                      e1.customDecode(in);
                      a1.add(e1);
                    }
                  }
                }
                m0.put(k0, v0);
              }
            }
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.level = null;
          } else {
            this.level = in.readInt();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.height = null;
          } else {
            this.height = in.readDouble();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.numfloors = null;
          } else {
            this.numfloors = in.readInt();
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.class$ = null;
          } else {
            this.class$ = in.readString(this.class$ instanceof Utf8 ? (Utf8)this.class$ : null);
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sources = null;
          } else {
            long size2 = in.readArrayStart();
            java.util.List<bag2.bag> a2 = this.sources;
            if (a2 == null) {
              a2 = new SpecificData.Array<bag2.bag>((int)size2, SCHEMA$.getField("sources").schema().getTypes().get(1));
              this.sources = a2;
            } else a2.clear();
            SpecificData.Array<bag2.bag> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<bag2.bag>)a2 : null);
            for ( ; 0 < size2; size2 = in.arrayNext()) {
              for ( ; size2 != 0; size2--) {
                bag2.bag e2 = (ga2 != null ? ga2.peek() : null);
                if (e2 == null) {
                  e2 = new bag2.bag();
                }
                e2.customDecode(in);
                a2.add(e2);
              }
            }
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bbox = null;
          } else {
            if (this.bbox == null) {
              this.bbox = new com.onthegomap.planetiler.overture.avrogen.bbox();
            }
            this.bbox.customDecode(in);
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.geometry = null;
          } else {
            this.geometry = in.readBytes(this.geometry);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










