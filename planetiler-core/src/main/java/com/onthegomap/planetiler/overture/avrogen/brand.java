/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.onthegomap.planetiler.overture.avrogen;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class brand extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 695024885965919168L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"brand\",\"namespace\":\"com.onthegomap.planetiler.overture.avrogen\",\"fields\":[{\"name\":\"names\",\"type\":[\"null\",{\"type\":\"map\",\"values\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"bag\",\"namespace\":\"bag7\",\"fields\":[{\"name\":\"array_element\",\"type\":[\"null\",{\"type\":\"map\",\"values\":[\"null\",\"string\"]}],\"default\":null}]}}]}],\"default\":null},{\"name\":\"wikidata\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<brand> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<brand> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<brand> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<brand> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<brand> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this brand to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a brand from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a brand instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static brand fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.Map<java.lang.CharSequence,java.util.List<bag7.bag>> names;
  private java.lang.CharSequence wikidata;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public brand() {}

  /**
   * All-args constructor.
   * @param names The new value for names
   * @param wikidata The new value for wikidata
   */
  public brand(java.util.Map<java.lang.CharSequence,java.util.List<bag7.bag>> names, java.lang.CharSequence wikidata) {
    this.names = names;
    this.wikidata = wikidata;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return names;
    case 1: return wikidata;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: names = (java.util.Map<java.lang.CharSequence,java.util.List<bag7.bag>>)value$; break;
    case 1: wikidata = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'names' field.
   * @return The value of the 'names' field.
   */
  public java.util.Map<java.lang.CharSequence,java.util.List<bag7.bag>> getNames() {
    return names;
  }


  /**
   * Sets the value of the 'names' field.
   * @param value the value to set.
   */
  public void setNames(java.util.Map<java.lang.CharSequence,java.util.List<bag7.bag>> value) {
    this.names = value;
  }

  /**
   * Gets the value of the 'wikidata' field.
   * @return The value of the 'wikidata' field.
   */
  public java.lang.CharSequence getWikidata() {
    return wikidata;
  }


  /**
   * Sets the value of the 'wikidata' field.
   * @param value the value to set.
   */
  public void setWikidata(java.lang.CharSequence value) {
    this.wikidata = value;
  }

  /**
   * Creates a new brand RecordBuilder.
   * @return A new brand RecordBuilder
   */
  public static com.onthegomap.planetiler.overture.avrogen.brand.Builder newBuilder() {
    return new com.onthegomap.planetiler.overture.avrogen.brand.Builder();
  }

  /**
   * Creates a new brand RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new brand RecordBuilder
   */
  public static com.onthegomap.planetiler.overture.avrogen.brand.Builder newBuilder(com.onthegomap.planetiler.overture.avrogen.brand.Builder other) {
    if (other == null) {
      return new com.onthegomap.planetiler.overture.avrogen.brand.Builder();
    } else {
      return new com.onthegomap.planetiler.overture.avrogen.brand.Builder(other);
    }
  }

  /**
   * Creates a new brand RecordBuilder by copying an existing brand instance.
   * @param other The existing instance to copy.
   * @return A new brand RecordBuilder
   */
  public static com.onthegomap.planetiler.overture.avrogen.brand.Builder newBuilder(com.onthegomap.planetiler.overture.avrogen.brand other) {
    if (other == null) {
      return new com.onthegomap.planetiler.overture.avrogen.brand.Builder();
    } else {
      return new com.onthegomap.planetiler.overture.avrogen.brand.Builder(other);
    }
  }

  /**
   * RecordBuilder for brand instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<brand>
    implements org.apache.avro.data.RecordBuilder<brand> {

    private java.util.Map<java.lang.CharSequence,java.util.List<bag7.bag>> names;
    private java.lang.CharSequence wikidata;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.onthegomap.planetiler.overture.avrogen.brand.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.names)) {
        this.names = data().deepCopy(fields()[0].schema(), other.names);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.wikidata)) {
        this.wikidata = data().deepCopy(fields()[1].schema(), other.wikidata);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing brand instance
     * @param other The existing instance to copy.
     */
    private Builder(com.onthegomap.planetiler.overture.avrogen.brand other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.names)) {
        this.names = data().deepCopy(fields()[0].schema(), other.names);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.wikidata)) {
        this.wikidata = data().deepCopy(fields()[1].schema(), other.wikidata);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'names' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.util.List<bag7.bag>> getNames() {
      return names;
    }


    /**
      * Sets the value of the 'names' field.
      * @param value The value of 'names'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.brand.Builder setNames(java.util.Map<java.lang.CharSequence,java.util.List<bag7.bag>> value) {
      validate(fields()[0], value);
      this.names = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'names' field has been set.
      * @return True if the 'names' field has been set, false otherwise.
      */
    public boolean hasNames() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'names' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.brand.Builder clearNames() {
      names = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'wikidata' field.
      * @return The value.
      */
    public java.lang.CharSequence getWikidata() {
      return wikidata;
    }


    /**
      * Sets the value of the 'wikidata' field.
      * @param value The value of 'wikidata'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.brand.Builder setWikidata(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.wikidata = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'wikidata' field has been set.
      * @return True if the 'wikidata' field has been set, false otherwise.
      */
    public boolean hasWikidata() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'wikidata' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.brand.Builder clearWikidata() {
      wikidata = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public brand build() {
      try {
        brand record = new brand();
        record.names = fieldSetFlags()[0] ? this.names : (java.util.Map<java.lang.CharSequence,java.util.List<bag7.bag>>) defaultValue(fields()[0]);
        record.wikidata = fieldSetFlags()[1] ? this.wikidata : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<brand>
    WRITER$ = (org.apache.avro.io.DatumWriter<brand>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<brand>
    READER$ = (org.apache.avro.io.DatumReader<brand>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.names == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.names.size();
      out.writeMapStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.util.Map.Entry<java.lang.CharSequence, java.util.List<bag7.bag>> e0: this.names.entrySet()) {
        actualSize0++;
        out.startItem();
        out.writeString(e0.getKey());
        java.util.List<bag7.bag> v0 = e0.getValue();
        if (v0 == null) {
          out.writeIndex(0);
          out.writeNull();
        } else {
          out.writeIndex(1);
          long size1 = v0.size();
          out.writeArrayStart();
          out.setItemCount(size1);
          long actualSize1 = 0;
          for (bag7.bag e1: v0) {
            actualSize1++;
            out.startItem();
            e1.customEncode(out);
          }
          out.writeArrayEnd();
          if (actualSize1 != size1)
            throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");
        }
      }
      out.writeMapEnd();
      if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.wikidata == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.wikidata);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.names = null;
      } else {
        long size0 = in.readMapStart();
        java.util.Map<java.lang.CharSequence,java.util.List<bag7.bag>> m0 = this.names; // Need fresh name due to limitation of macro system
        if (m0 == null) {
          m0 = new java.util.HashMap<java.lang.CharSequence,java.util.List<bag7.bag>>((int)size0);
          this.names = m0;
        } else m0.clear();
        for ( ; 0 < size0; size0 = in.mapNext()) {
          for ( ; size0 != 0; size0--) {
            java.lang.CharSequence k0 = null;
            k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
            java.util.List<bag7.bag> v0 = null;
            if (in.readIndex() != 1) {
              in.readNull();
              v0 = null;
            } else {
              long size1 = in.readArrayStart();
              java.util.List<bag7.bag> a1 = v0;
              if (a1 == null) {
                a1 = new SpecificData.Array<bag7.bag>((int)size1, SCHEMA$.getField("names").schema().getTypes().get(1).getValueType().getTypes().get(1));
                v0 = a1;
              } else a1.clear();
              SpecificData.Array<bag7.bag> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<bag7.bag>)a1 : null);
              for ( ; 0 < size1; size1 = in.arrayNext()) {
                for ( ; size1 != 0; size1--) {
                  bag7.bag e1 = (ga1 != null ? ga1.peek() : null);
                  if (e1 == null) {
                    e1 = new bag7.bag();
                  }
                  e1.customDecode(in);
                  a1.add(e1);
                }
              }
            }
            m0.put(k0, v0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.wikidata = null;
      } else {
        this.wikidata = in.readString(this.wikidata instanceof Utf8 ? (Utf8)this.wikidata : null);
      }

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.names = null;
          } else {
            long size0 = in.readMapStart();
            java.util.Map<java.lang.CharSequence,java.util.List<bag7.bag>> m0 = this.names; // Need fresh name due to limitation of macro system
            if (m0 == null) {
              m0 = new java.util.HashMap<java.lang.CharSequence,java.util.List<bag7.bag>>((int)size0);
              this.names = m0;
            } else m0.clear();
            for ( ; 0 < size0; size0 = in.mapNext()) {
              for ( ; size0 != 0; size0--) {
                java.lang.CharSequence k0 = null;
                k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
                java.util.List<bag7.bag> v0 = null;
                if (in.readIndex() != 1) {
                  in.readNull();
                  v0 = null;
                } else {
                  long size1 = in.readArrayStart();
                  java.util.List<bag7.bag> a1 = v0;
                  if (a1 == null) {
                    a1 = new SpecificData.Array<bag7.bag>((int)size1, SCHEMA$.getField("names").schema().getTypes().get(1).getValueType().getTypes().get(1));
                    v0 = a1;
                  } else a1.clear();
                  SpecificData.Array<bag7.bag> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<bag7.bag>)a1 : null);
                  for ( ; 0 < size1; size1 = in.arrayNext()) {
                    for ( ; size1 != 0; size1--) {
                      bag7.bag e1 = (ga1 != null ? ga1.peek() : null);
                      if (e1 == null) {
                        e1 = new bag7.bag();
                      }
                      e1.customDecode(in);
                      a1.add(e1);
                    }
                  }
                }
                m0.put(k0, v0);
              }
            }
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.wikidata = null;
          } else {
            this.wikidata = in.readString(this.wikidata instanceof Utf8 ? (Utf8)this.wikidata : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










