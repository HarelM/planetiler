/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.onthegomap.planetiler.overture.avrogen;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Place extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1472603045347712443L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Place\",\"namespace\":\"com.onthegomap.planetiler.overture.avrogen\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"updatetime\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"version\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"names\",\"type\":[\"null\",{\"type\":\"map\",\"values\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"bag\",\"fields\":[{\"name\":\"array_element\",\"type\":[\"null\",{\"type\":\"map\",\"values\":[\"null\",\"string\"]}],\"default\":null}]}}]}],\"default\":null},{\"name\":\"categories\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"categories\",\"fields\":[{\"name\":\"main\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"alternate\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"bag\",\"namespace\":\"bag2\",\"fields\":[{\"name\":\"array_element\",\"type\":[\"null\",\"string\"],\"default\":null}]}}],\"default\":null}]}],\"default\":null},{\"name\":\"confidence\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"websites\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"bag\",\"namespace\":\"bag3\",\"fields\":[{\"name\":\"array_element\",\"type\":[\"null\",\"string\"],\"default\":null}]}}],\"default\":null},{\"name\":\"socials\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"bag\",\"namespace\":\"bag4\",\"fields\":[{\"name\":\"array_element\",\"type\":[\"null\",\"string\"],\"default\":null}]}}],\"default\":null},{\"name\":\"emails\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"bag\",\"namespace\":\"bag5\",\"fields\":[{\"name\":\"array_element\",\"type\":[\"null\",\"string\"],\"default\":null}]}}],\"default\":null},{\"name\":\"phones\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"bag\",\"namespace\":\"bag6\",\"fields\":[{\"name\":\"array_element\",\"type\":[\"null\",\"string\"],\"default\":null}]}}],\"default\":null},{\"name\":\"brand\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"brand\",\"fields\":[{\"name\":\"names\",\"type\":[\"null\",{\"type\":\"map\",\"values\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"bag\",\"namespace\":\"bag7\",\"fields\":[{\"name\":\"array_element\",\"type\":[\"null\",{\"type\":\"map\",\"values\":[\"null\",\"string\"]}],\"default\":null}]}}]}],\"default\":null},{\"name\":\"wikidata\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"addresses\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"bag\",\"namespace\":\"bag8\",\"fields\":[{\"name\":\"array_element\",\"type\":[\"null\",{\"type\":\"map\",\"values\":[\"null\",\"string\"]}],\"default\":null}]}}],\"default\":null},{\"name\":\"sources\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"bag\",\"namespace\":\"bag9\",\"fields\":[{\"name\":\"array_element\",\"type\":[\"null\",{\"type\":\"map\",\"values\":[\"null\",\"string\"]}],\"default\":null}]}}],\"default\":null},{\"name\":\"bbox\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"bbox\",\"fields\":[{\"name\":\"minx\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"maxx\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"miny\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"maxy\",\"type\":[\"null\",\"double\"],\"default\":null}]}],\"default\":null},{\"name\":\"geometry\",\"type\":[\"null\",\"bytes\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Place> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Place> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Place> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Place> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Place> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Place to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Place from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Place instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Place fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence id;
  private java.lang.CharSequence updatetime;
  private java.lang.Integer version;
  private java.util.Map<java.lang.CharSequence,java.util.List<com.onthegomap.planetiler.overture.avrogen.bag>> names;
  private com.onthegomap.planetiler.overture.avrogen.categories categories;
  private java.lang.Double confidence;
  private java.util.List<bag3.bag> websites;
  private java.util.List<bag4.bag> socials;
  private java.util.List<bag5.bag> emails;
  private java.util.List<bag6.bag> phones;
  private com.onthegomap.planetiler.overture.avrogen.brand brand;
  private java.util.List<bag8.bag> addresses;
  private java.util.List<bag9.bag> sources;
  private com.onthegomap.planetiler.overture.avrogen.bbox bbox;
  private java.nio.ByteBuffer geometry;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Place() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param updatetime The new value for updatetime
   * @param version The new value for version
   * @param names The new value for names
   * @param categories The new value for categories
   * @param confidence The new value for confidence
   * @param websites The new value for websites
   * @param socials The new value for socials
   * @param emails The new value for emails
   * @param phones The new value for phones
   * @param brand The new value for brand
   * @param addresses The new value for addresses
   * @param sources The new value for sources
   * @param bbox The new value for bbox
   * @param geometry The new value for geometry
   */
  public Place(java.lang.CharSequence id, java.lang.CharSequence updatetime, java.lang.Integer version, java.util.Map<java.lang.CharSequence,java.util.List<com.onthegomap.planetiler.overture.avrogen.bag>> names, com.onthegomap.planetiler.overture.avrogen.categories categories, java.lang.Double confidence, java.util.List<bag3.bag> websites, java.util.List<bag4.bag> socials, java.util.List<bag5.bag> emails, java.util.List<bag6.bag> phones, com.onthegomap.planetiler.overture.avrogen.brand brand, java.util.List<bag8.bag> addresses, java.util.List<bag9.bag> sources, com.onthegomap.planetiler.overture.avrogen.bbox bbox, java.nio.ByteBuffer geometry) {
    this.id = id;
    this.updatetime = updatetime;
    this.version = version;
    this.names = names;
    this.categories = categories;
    this.confidence = confidence;
    this.websites = websites;
    this.socials = socials;
    this.emails = emails;
    this.phones = phones;
    this.brand = brand;
    this.addresses = addresses;
    this.sources = sources;
    this.bbox = bbox;
    this.geometry = geometry;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return updatetime;
    case 2: return version;
    case 3: return names;
    case 4: return categories;
    case 5: return confidence;
    case 6: return websites;
    case 7: return socials;
    case 8: return emails;
    case 9: return phones;
    case 10: return brand;
    case 11: return addresses;
    case 12: return sources;
    case 13: return bbox;
    case 14: return geometry;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: updatetime = (java.lang.CharSequence)value$; break;
    case 2: version = (java.lang.Integer)value$; break;
    case 3: names = (java.util.Map<java.lang.CharSequence,java.util.List<com.onthegomap.planetiler.overture.avrogen.bag>>)value$; break;
    case 4: categories = (com.onthegomap.planetiler.overture.avrogen.categories)value$; break;
    case 5: confidence = (java.lang.Double)value$; break;
    case 6: websites = (java.util.List<bag3.bag>)value$; break;
    case 7: socials = (java.util.List<bag4.bag>)value$; break;
    case 8: emails = (java.util.List<bag5.bag>)value$; break;
    case 9: phones = (java.util.List<bag6.bag>)value$; break;
    case 10: brand = (com.onthegomap.planetiler.overture.avrogen.brand)value$; break;
    case 11: addresses = (java.util.List<bag8.bag>)value$; break;
    case 12: sources = (java.util.List<bag9.bag>)value$; break;
    case 13: bbox = (com.onthegomap.planetiler.overture.avrogen.bbox)value$; break;
    case 14: geometry = (java.nio.ByteBuffer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'updatetime' field.
   * @return The value of the 'updatetime' field.
   */
  public java.lang.CharSequence getUpdatetime() {
    return updatetime;
  }


  /**
   * Sets the value of the 'updatetime' field.
   * @param value the value to set.
   */
  public void setUpdatetime(java.lang.CharSequence value) {
    this.updatetime = value;
  }

  /**
   * Gets the value of the 'version' field.
   * @return The value of the 'version' field.
   */
  public java.lang.Integer getVersion() {
    return version;
  }


  /**
   * Sets the value of the 'version' field.
   * @param value the value to set.
   */
  public void setVersion(java.lang.Integer value) {
    this.version = value;
  }

  /**
   * Gets the value of the 'names' field.
   * @return The value of the 'names' field.
   */
  public java.util.Map<java.lang.CharSequence,java.util.List<com.onthegomap.planetiler.overture.avrogen.bag>> getNames() {
    return names;
  }


  /**
   * Sets the value of the 'names' field.
   * @param value the value to set.
   */
  public void setNames(java.util.Map<java.lang.CharSequence,java.util.List<com.onthegomap.planetiler.overture.avrogen.bag>> value) {
    this.names = value;
  }

  /**
   * Gets the value of the 'categories' field.
   * @return The value of the 'categories' field.
   */
  public com.onthegomap.planetiler.overture.avrogen.categories getCategories() {
    return categories;
  }


  /**
   * Sets the value of the 'categories' field.
   * @param value the value to set.
   */
  public void setCategories(com.onthegomap.planetiler.overture.avrogen.categories value) {
    this.categories = value;
  }

  /**
   * Gets the value of the 'confidence' field.
   * @return The value of the 'confidence' field.
   */
  public java.lang.Double getConfidence() {
    return confidence;
  }


  /**
   * Sets the value of the 'confidence' field.
   * @param value the value to set.
   */
  public void setConfidence(java.lang.Double value) {
    this.confidence = value;
  }

  /**
   * Gets the value of the 'websites' field.
   * @return The value of the 'websites' field.
   */
  public java.util.List<bag3.bag> getWebsites() {
    return websites;
  }


  /**
   * Sets the value of the 'websites' field.
   * @param value the value to set.
   */
  public void setWebsites(java.util.List<bag3.bag> value) {
    this.websites = value;
  }

  /**
   * Gets the value of the 'socials' field.
   * @return The value of the 'socials' field.
   */
  public java.util.List<bag4.bag> getSocials() {
    return socials;
  }


  /**
   * Sets the value of the 'socials' field.
   * @param value the value to set.
   */
  public void setSocials(java.util.List<bag4.bag> value) {
    this.socials = value;
  }

  /**
   * Gets the value of the 'emails' field.
   * @return The value of the 'emails' field.
   */
  public java.util.List<bag5.bag> getEmails() {
    return emails;
  }


  /**
   * Sets the value of the 'emails' field.
   * @param value the value to set.
   */
  public void setEmails(java.util.List<bag5.bag> value) {
    this.emails = value;
  }

  /**
   * Gets the value of the 'phones' field.
   * @return The value of the 'phones' field.
   */
  public java.util.List<bag6.bag> getPhones() {
    return phones;
  }


  /**
   * Sets the value of the 'phones' field.
   * @param value the value to set.
   */
  public void setPhones(java.util.List<bag6.bag> value) {
    this.phones = value;
  }

  /**
   * Gets the value of the 'brand' field.
   * @return The value of the 'brand' field.
   */
  public com.onthegomap.planetiler.overture.avrogen.brand getBrand() {
    return brand;
  }


  /**
   * Sets the value of the 'brand' field.
   * @param value the value to set.
   */
  public void setBrand(com.onthegomap.planetiler.overture.avrogen.brand value) {
    this.brand = value;
  }

  /**
   * Gets the value of the 'addresses' field.
   * @return The value of the 'addresses' field.
   */
  public java.util.List<bag8.bag> getAddresses() {
    return addresses;
  }


  /**
   * Sets the value of the 'addresses' field.
   * @param value the value to set.
   */
  public void setAddresses(java.util.List<bag8.bag> value) {
    this.addresses = value;
  }

  /**
   * Gets the value of the 'sources' field.
   * @return The value of the 'sources' field.
   */
  public java.util.List<bag9.bag> getSources() {
    return sources;
  }


  /**
   * Sets the value of the 'sources' field.
   * @param value the value to set.
   */
  public void setSources(java.util.List<bag9.bag> value) {
    this.sources = value;
  }

  /**
   * Gets the value of the 'bbox' field.
   * @return The value of the 'bbox' field.
   */
  public com.onthegomap.planetiler.overture.avrogen.bbox getBbox() {
    return bbox;
  }


  /**
   * Sets the value of the 'bbox' field.
   * @param value the value to set.
   */
  public void setBbox(com.onthegomap.planetiler.overture.avrogen.bbox value) {
    this.bbox = value;
  }

  /**
   * Gets the value of the 'geometry' field.
   * @return The value of the 'geometry' field.
   */
  public java.nio.ByteBuffer getGeometry() {
    return geometry;
  }


  /**
   * Sets the value of the 'geometry' field.
   * @param value the value to set.
   */
  public void setGeometry(java.nio.ByteBuffer value) {
    this.geometry = value;
  }

  /**
   * Creates a new Place RecordBuilder.
   * @return A new Place RecordBuilder
   */
  public static com.onthegomap.planetiler.overture.avrogen.Place.Builder newBuilder() {
    return new com.onthegomap.planetiler.overture.avrogen.Place.Builder();
  }

  /**
   * Creates a new Place RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Place RecordBuilder
   */
  public static com.onthegomap.planetiler.overture.avrogen.Place.Builder newBuilder(com.onthegomap.planetiler.overture.avrogen.Place.Builder other) {
    if (other == null) {
      return new com.onthegomap.planetiler.overture.avrogen.Place.Builder();
    } else {
      return new com.onthegomap.planetiler.overture.avrogen.Place.Builder(other);
    }
  }

  /**
   * Creates a new Place RecordBuilder by copying an existing Place instance.
   * @param other The existing instance to copy.
   * @return A new Place RecordBuilder
   */
  public static com.onthegomap.planetiler.overture.avrogen.Place.Builder newBuilder(com.onthegomap.planetiler.overture.avrogen.Place other) {
    if (other == null) {
      return new com.onthegomap.planetiler.overture.avrogen.Place.Builder();
    } else {
      return new com.onthegomap.planetiler.overture.avrogen.Place.Builder(other);
    }
  }

  /**
   * RecordBuilder for Place instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Place>
    implements org.apache.avro.data.RecordBuilder<Place> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence updatetime;
    private java.lang.Integer version;
    private java.util.Map<java.lang.CharSequence,java.util.List<com.onthegomap.planetiler.overture.avrogen.bag>> names;
    private com.onthegomap.planetiler.overture.avrogen.categories categories;
    private com.onthegomap.planetiler.overture.avrogen.categories.Builder categoriesBuilder;
    private java.lang.Double confidence;
    private java.util.List<bag3.bag> websites;
    private java.util.List<bag4.bag> socials;
    private java.util.List<bag5.bag> emails;
    private java.util.List<bag6.bag> phones;
    private com.onthegomap.planetiler.overture.avrogen.brand brand;
    private com.onthegomap.planetiler.overture.avrogen.brand.Builder brandBuilder;
    private java.util.List<bag8.bag> addresses;
    private java.util.List<bag9.bag> sources;
    private com.onthegomap.planetiler.overture.avrogen.bbox bbox;
    private com.onthegomap.planetiler.overture.avrogen.bbox.Builder bboxBuilder;
    private java.nio.ByteBuffer geometry;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.onthegomap.planetiler.overture.avrogen.Place.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.updatetime)) {
        this.updatetime = data().deepCopy(fields()[1].schema(), other.updatetime);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.version)) {
        this.version = data().deepCopy(fields()[2].schema(), other.version);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.names)) {
        this.names = data().deepCopy(fields()[3].schema(), other.names);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.categories)) {
        this.categories = data().deepCopy(fields()[4].schema(), other.categories);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (other.hasCategoriesBuilder()) {
        this.categoriesBuilder = com.onthegomap.planetiler.overture.avrogen.categories.newBuilder(other.getCategoriesBuilder());
      }
      if (isValidValue(fields()[5], other.confidence)) {
        this.confidence = data().deepCopy(fields()[5].schema(), other.confidence);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.websites)) {
        this.websites = data().deepCopy(fields()[6].schema(), other.websites);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.socials)) {
        this.socials = data().deepCopy(fields()[7].schema(), other.socials);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.emails)) {
        this.emails = data().deepCopy(fields()[8].schema(), other.emails);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.phones)) {
        this.phones = data().deepCopy(fields()[9].schema(), other.phones);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.brand)) {
        this.brand = data().deepCopy(fields()[10].schema(), other.brand);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (other.hasBrandBuilder()) {
        this.brandBuilder = com.onthegomap.planetiler.overture.avrogen.brand.newBuilder(other.getBrandBuilder());
      }
      if (isValidValue(fields()[11], other.addresses)) {
        this.addresses = data().deepCopy(fields()[11].schema(), other.addresses);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.sources)) {
        this.sources = data().deepCopy(fields()[12].schema(), other.sources);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.bbox)) {
        this.bbox = data().deepCopy(fields()[13].schema(), other.bbox);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (other.hasBboxBuilder()) {
        this.bboxBuilder = com.onthegomap.planetiler.overture.avrogen.bbox.newBuilder(other.getBboxBuilder());
      }
      if (isValidValue(fields()[14], other.geometry)) {
        this.geometry = data().deepCopy(fields()[14].schema(), other.geometry);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
    }

    /**
     * Creates a Builder by copying an existing Place instance
     * @param other The existing instance to copy.
     */
    private Builder(com.onthegomap.planetiler.overture.avrogen.Place other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.updatetime)) {
        this.updatetime = data().deepCopy(fields()[1].schema(), other.updatetime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.version)) {
        this.version = data().deepCopy(fields()[2].schema(), other.version);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.names)) {
        this.names = data().deepCopy(fields()[3].schema(), other.names);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.categories)) {
        this.categories = data().deepCopy(fields()[4].schema(), other.categories);
        fieldSetFlags()[4] = true;
      }
      this.categoriesBuilder = null;
      if (isValidValue(fields()[5], other.confidence)) {
        this.confidence = data().deepCopy(fields()[5].schema(), other.confidence);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.websites)) {
        this.websites = data().deepCopy(fields()[6].schema(), other.websites);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.socials)) {
        this.socials = data().deepCopy(fields()[7].schema(), other.socials);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.emails)) {
        this.emails = data().deepCopy(fields()[8].schema(), other.emails);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.phones)) {
        this.phones = data().deepCopy(fields()[9].schema(), other.phones);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.brand)) {
        this.brand = data().deepCopy(fields()[10].schema(), other.brand);
        fieldSetFlags()[10] = true;
      }
      this.brandBuilder = null;
      if (isValidValue(fields()[11], other.addresses)) {
        this.addresses = data().deepCopy(fields()[11].schema(), other.addresses);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.sources)) {
        this.sources = data().deepCopy(fields()[12].schema(), other.sources);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.bbox)) {
        this.bbox = data().deepCopy(fields()[13].schema(), other.bbox);
        fieldSetFlags()[13] = true;
      }
      this.bboxBuilder = null;
      if (isValidValue(fields()[14], other.geometry)) {
        this.geometry = data().deepCopy(fields()[14].schema(), other.geometry);
        fieldSetFlags()[14] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Place.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Place.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'updatetime' field.
      * @return The value.
      */
    public java.lang.CharSequence getUpdatetime() {
      return updatetime;
    }


    /**
      * Sets the value of the 'updatetime' field.
      * @param value The value of 'updatetime'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Place.Builder setUpdatetime(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.updatetime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'updatetime' field has been set.
      * @return True if the 'updatetime' field has been set, false otherwise.
      */
    public boolean hasUpdatetime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'updatetime' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Place.Builder clearUpdatetime() {
      updatetime = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'version' field.
      * @return The value.
      */
    public java.lang.Integer getVersion() {
      return version;
    }


    /**
      * Sets the value of the 'version' field.
      * @param value The value of 'version'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Place.Builder setVersion(java.lang.Integer value) {
      validate(fields()[2], value);
      this.version = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'version' field has been set.
      * @return True if the 'version' field has been set, false otherwise.
      */
    public boolean hasVersion() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'version' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Place.Builder clearVersion() {
      version = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'names' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.util.List<com.onthegomap.planetiler.overture.avrogen.bag>> getNames() {
      return names;
    }


    /**
      * Sets the value of the 'names' field.
      * @param value The value of 'names'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Place.Builder setNames(java.util.Map<java.lang.CharSequence,java.util.List<com.onthegomap.planetiler.overture.avrogen.bag>> value) {
      validate(fields()[3], value);
      this.names = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'names' field has been set.
      * @return True if the 'names' field has been set, false otherwise.
      */
    public boolean hasNames() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'names' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Place.Builder clearNames() {
      names = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'categories' field.
      * @return The value.
      */
    public com.onthegomap.planetiler.overture.avrogen.categories getCategories() {
      return categories;
    }


    /**
      * Sets the value of the 'categories' field.
      * @param value The value of 'categories'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Place.Builder setCategories(com.onthegomap.planetiler.overture.avrogen.categories value) {
      validate(fields()[4], value);
      this.categoriesBuilder = null;
      this.categories = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'categories' field has been set.
      * @return True if the 'categories' field has been set, false otherwise.
      */
    public boolean hasCategories() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'categories' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.onthegomap.planetiler.overture.avrogen.categories.Builder getCategoriesBuilder() {
      if (categoriesBuilder == null) {
        if (hasCategories()) {
          setCategoriesBuilder(com.onthegomap.planetiler.overture.avrogen.categories.newBuilder(categories));
        } else {
          setCategoriesBuilder(com.onthegomap.planetiler.overture.avrogen.categories.newBuilder());
        }
      }
      return categoriesBuilder;
    }

    /**
     * Sets the Builder instance for the 'categories' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.onthegomap.planetiler.overture.avrogen.Place.Builder setCategoriesBuilder(com.onthegomap.planetiler.overture.avrogen.categories.Builder value) {
      clearCategories();
      categoriesBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'categories' field has an active Builder instance
     * @return True if the 'categories' field has an active Builder instance
     */
    public boolean hasCategoriesBuilder() {
      return categoriesBuilder != null;
    }

    /**
      * Clears the value of the 'categories' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Place.Builder clearCategories() {
      categories = null;
      categoriesBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'confidence' field.
      * @return The value.
      */
    public java.lang.Double getConfidence() {
      return confidence;
    }


    /**
      * Sets the value of the 'confidence' field.
      * @param value The value of 'confidence'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Place.Builder setConfidence(java.lang.Double value) {
      validate(fields()[5], value);
      this.confidence = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'confidence' field has been set.
      * @return True if the 'confidence' field has been set, false otherwise.
      */
    public boolean hasConfidence() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'confidence' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Place.Builder clearConfidence() {
      confidence = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'websites' field.
      * @return The value.
      */
    public java.util.List<bag3.bag> getWebsites() {
      return websites;
    }


    /**
      * Sets the value of the 'websites' field.
      * @param value The value of 'websites'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Place.Builder setWebsites(java.util.List<bag3.bag> value) {
      validate(fields()[6], value);
      this.websites = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'websites' field has been set.
      * @return True if the 'websites' field has been set, false otherwise.
      */
    public boolean hasWebsites() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'websites' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Place.Builder clearWebsites() {
      websites = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'socials' field.
      * @return The value.
      */
    public java.util.List<bag4.bag> getSocials() {
      return socials;
    }


    /**
      * Sets the value of the 'socials' field.
      * @param value The value of 'socials'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Place.Builder setSocials(java.util.List<bag4.bag> value) {
      validate(fields()[7], value);
      this.socials = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'socials' field has been set.
      * @return True if the 'socials' field has been set, false otherwise.
      */
    public boolean hasSocials() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'socials' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Place.Builder clearSocials() {
      socials = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'emails' field.
      * @return The value.
      */
    public java.util.List<bag5.bag> getEmails() {
      return emails;
    }


    /**
      * Sets the value of the 'emails' field.
      * @param value The value of 'emails'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Place.Builder setEmails(java.util.List<bag5.bag> value) {
      validate(fields()[8], value);
      this.emails = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'emails' field has been set.
      * @return True if the 'emails' field has been set, false otherwise.
      */
    public boolean hasEmails() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'emails' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Place.Builder clearEmails() {
      emails = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'phones' field.
      * @return The value.
      */
    public java.util.List<bag6.bag> getPhones() {
      return phones;
    }


    /**
      * Sets the value of the 'phones' field.
      * @param value The value of 'phones'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Place.Builder setPhones(java.util.List<bag6.bag> value) {
      validate(fields()[9], value);
      this.phones = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'phones' field has been set.
      * @return True if the 'phones' field has been set, false otherwise.
      */
    public boolean hasPhones() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'phones' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Place.Builder clearPhones() {
      phones = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'brand' field.
      * @return The value.
      */
    public com.onthegomap.planetiler.overture.avrogen.brand getBrand() {
      return brand;
    }


    /**
      * Sets the value of the 'brand' field.
      * @param value The value of 'brand'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Place.Builder setBrand(com.onthegomap.planetiler.overture.avrogen.brand value) {
      validate(fields()[10], value);
      this.brandBuilder = null;
      this.brand = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'brand' field has been set.
      * @return True if the 'brand' field has been set, false otherwise.
      */
    public boolean hasBrand() {
      return fieldSetFlags()[10];
    }

    /**
     * Gets the Builder instance for the 'brand' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.onthegomap.planetiler.overture.avrogen.brand.Builder getBrandBuilder() {
      if (brandBuilder == null) {
        if (hasBrand()) {
          setBrandBuilder(com.onthegomap.planetiler.overture.avrogen.brand.newBuilder(brand));
        } else {
          setBrandBuilder(com.onthegomap.planetiler.overture.avrogen.brand.newBuilder());
        }
      }
      return brandBuilder;
    }

    /**
     * Sets the Builder instance for the 'brand' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.onthegomap.planetiler.overture.avrogen.Place.Builder setBrandBuilder(com.onthegomap.planetiler.overture.avrogen.brand.Builder value) {
      clearBrand();
      brandBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'brand' field has an active Builder instance
     * @return True if the 'brand' field has an active Builder instance
     */
    public boolean hasBrandBuilder() {
      return brandBuilder != null;
    }

    /**
      * Clears the value of the 'brand' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Place.Builder clearBrand() {
      brand = null;
      brandBuilder = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'addresses' field.
      * @return The value.
      */
    public java.util.List<bag8.bag> getAddresses() {
      return addresses;
    }


    /**
      * Sets the value of the 'addresses' field.
      * @param value The value of 'addresses'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Place.Builder setAddresses(java.util.List<bag8.bag> value) {
      validate(fields()[11], value);
      this.addresses = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'addresses' field has been set.
      * @return True if the 'addresses' field has been set, false otherwise.
      */
    public boolean hasAddresses() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'addresses' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Place.Builder clearAddresses() {
      addresses = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'sources' field.
      * @return The value.
      */
    public java.util.List<bag9.bag> getSources() {
      return sources;
    }


    /**
      * Sets the value of the 'sources' field.
      * @param value The value of 'sources'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Place.Builder setSources(java.util.List<bag9.bag> value) {
      validate(fields()[12], value);
      this.sources = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'sources' field has been set.
      * @return True if the 'sources' field has been set, false otherwise.
      */
    public boolean hasSources() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'sources' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Place.Builder clearSources() {
      sources = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'bbox' field.
      * @return The value.
      */
    public com.onthegomap.planetiler.overture.avrogen.bbox getBbox() {
      return bbox;
    }


    /**
      * Sets the value of the 'bbox' field.
      * @param value The value of 'bbox'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Place.Builder setBbox(com.onthegomap.planetiler.overture.avrogen.bbox value) {
      validate(fields()[13], value);
      this.bboxBuilder = null;
      this.bbox = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'bbox' field has been set.
      * @return True if the 'bbox' field has been set, false otherwise.
      */
    public boolean hasBbox() {
      return fieldSetFlags()[13];
    }

    /**
     * Gets the Builder instance for the 'bbox' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.onthegomap.planetiler.overture.avrogen.bbox.Builder getBboxBuilder() {
      if (bboxBuilder == null) {
        if (hasBbox()) {
          setBboxBuilder(com.onthegomap.planetiler.overture.avrogen.bbox.newBuilder(bbox));
        } else {
          setBboxBuilder(com.onthegomap.planetiler.overture.avrogen.bbox.newBuilder());
        }
      }
      return bboxBuilder;
    }

    /**
     * Sets the Builder instance for the 'bbox' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.onthegomap.planetiler.overture.avrogen.Place.Builder setBboxBuilder(com.onthegomap.planetiler.overture.avrogen.bbox.Builder value) {
      clearBbox();
      bboxBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'bbox' field has an active Builder instance
     * @return True if the 'bbox' field has an active Builder instance
     */
    public boolean hasBboxBuilder() {
      return bboxBuilder != null;
    }

    /**
      * Clears the value of the 'bbox' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Place.Builder clearBbox() {
      bbox = null;
      bboxBuilder = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'geometry' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getGeometry() {
      return geometry;
    }


    /**
      * Sets the value of the 'geometry' field.
      * @param value The value of 'geometry'.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Place.Builder setGeometry(java.nio.ByteBuffer value) {
      validate(fields()[14], value);
      this.geometry = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'geometry' field has been set.
      * @return True if the 'geometry' field has been set, false otherwise.
      */
    public boolean hasGeometry() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'geometry' field.
      * @return This builder.
      */
    public com.onthegomap.planetiler.overture.avrogen.Place.Builder clearGeometry() {
      geometry = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Place build() {
      try {
        Place record = new Place();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.updatetime = fieldSetFlags()[1] ? this.updatetime : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.version = fieldSetFlags()[2] ? this.version : (java.lang.Integer) defaultValue(fields()[2]);
        record.names = fieldSetFlags()[3] ? this.names : (java.util.Map<java.lang.CharSequence,java.util.List<com.onthegomap.planetiler.overture.avrogen.bag>>) defaultValue(fields()[3]);
        if (categoriesBuilder != null) {
          try {
            record.categories = this.categoriesBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("categories"));
            throw e;
          }
        } else {
          record.categories = fieldSetFlags()[4] ? this.categories : (com.onthegomap.planetiler.overture.avrogen.categories) defaultValue(fields()[4]);
        }
        record.confidence = fieldSetFlags()[5] ? this.confidence : (java.lang.Double) defaultValue(fields()[5]);
        record.websites = fieldSetFlags()[6] ? this.websites : (java.util.List<bag3.bag>) defaultValue(fields()[6]);
        record.socials = fieldSetFlags()[7] ? this.socials : (java.util.List<bag4.bag>) defaultValue(fields()[7]);
        record.emails = fieldSetFlags()[8] ? this.emails : (java.util.List<bag5.bag>) defaultValue(fields()[8]);
        record.phones = fieldSetFlags()[9] ? this.phones : (java.util.List<bag6.bag>) defaultValue(fields()[9]);
        if (brandBuilder != null) {
          try {
            record.brand = this.brandBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("brand"));
            throw e;
          }
        } else {
          record.brand = fieldSetFlags()[10] ? this.brand : (com.onthegomap.planetiler.overture.avrogen.brand) defaultValue(fields()[10]);
        }
        record.addresses = fieldSetFlags()[11] ? this.addresses : (java.util.List<bag8.bag>) defaultValue(fields()[11]);
        record.sources = fieldSetFlags()[12] ? this.sources : (java.util.List<bag9.bag>) defaultValue(fields()[12]);
        if (bboxBuilder != null) {
          try {
            record.bbox = this.bboxBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("bbox"));
            throw e;
          }
        } else {
          record.bbox = fieldSetFlags()[13] ? this.bbox : (com.onthegomap.planetiler.overture.avrogen.bbox) defaultValue(fields()[13]);
        }
        record.geometry = fieldSetFlags()[14] ? this.geometry : (java.nio.ByteBuffer) defaultValue(fields()[14]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Place>
    WRITER$ = (org.apache.avro.io.DatumWriter<Place>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Place>
    READER$ = (org.apache.avro.io.DatumReader<Place>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.id);
    }

    if (this.updatetime == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.updatetime);
    }

    if (this.version == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.version);
    }

    if (this.names == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.names.size();
      out.writeMapStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.util.Map.Entry<java.lang.CharSequence, java.util.List<com.onthegomap.planetiler.overture.avrogen.bag>> e0: this.names.entrySet()) {
        actualSize0++;
        out.startItem();
        out.writeString(e0.getKey());
        java.util.List<com.onthegomap.planetiler.overture.avrogen.bag> v0 = e0.getValue();
        if (v0 == null) {
          out.writeIndex(0);
          out.writeNull();
        } else {
          out.writeIndex(1);
          long size1 = v0.size();
          out.writeArrayStart();
          out.setItemCount(size1);
          long actualSize1 = 0;
          for (com.onthegomap.planetiler.overture.avrogen.bag e1: v0) {
            actualSize1++;
            out.startItem();
            e1.customEncode(out);
          }
          out.writeArrayEnd();
          if (actualSize1 != size1)
            throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");
        }
      }
      out.writeMapEnd();
      if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.categories == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.categories.customEncode(out);
    }

    if (this.confidence == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.confidence);
    }

    if (this.websites == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size2 = this.websites.size();
      out.writeArrayStart();
      out.setItemCount(size2);
      long actualSize2 = 0;
      for (bag3.bag e2: this.websites) {
        actualSize2++;
        out.startItem();
        e2.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize2 != size2)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");
    }

    if (this.socials == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size3 = this.socials.size();
      out.writeArrayStart();
      out.setItemCount(size3);
      long actualSize3 = 0;
      for (bag4.bag e3: this.socials) {
        actualSize3++;
        out.startItem();
        e3.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize3 != size3)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size3 + ", but element count was " + actualSize3 + ".");
    }

    if (this.emails == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size4 = this.emails.size();
      out.writeArrayStart();
      out.setItemCount(size4);
      long actualSize4 = 0;
      for (bag5.bag e4: this.emails) {
        actualSize4++;
        out.startItem();
        e4.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize4 != size4)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size4 + ", but element count was " + actualSize4 + ".");
    }

    if (this.phones == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size5 = this.phones.size();
      out.writeArrayStart();
      out.setItemCount(size5);
      long actualSize5 = 0;
      for (bag6.bag e5: this.phones) {
        actualSize5++;
        out.startItem();
        e5.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize5 != size5)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size5 + ", but element count was " + actualSize5 + ".");
    }

    if (this.brand == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.brand.customEncode(out);
    }

    if (this.addresses == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size6 = this.addresses.size();
      out.writeArrayStart();
      out.setItemCount(size6);
      long actualSize6 = 0;
      for (bag8.bag e6: this.addresses) {
        actualSize6++;
        out.startItem();
        e6.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize6 != size6)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size6 + ", but element count was " + actualSize6 + ".");
    }

    if (this.sources == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size7 = this.sources.size();
      out.writeArrayStart();
      out.setItemCount(size7);
      long actualSize7 = 0;
      for (bag9.bag e7: this.sources) {
        actualSize7++;
        out.startItem();
        e7.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize7 != size7)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size7 + ", but element count was " + actualSize7 + ".");
    }

    if (this.bbox == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.bbox.customEncode(out);
    }

    if (this.geometry == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBytes(this.geometry);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.id = null;
      } else {
        this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.updatetime = null;
      } else {
        this.updatetime = in.readString(this.updatetime instanceof Utf8 ? (Utf8)this.updatetime : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.version = null;
      } else {
        this.version = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.names = null;
      } else {
        long size0 = in.readMapStart();
        java.util.Map<java.lang.CharSequence,java.util.List<com.onthegomap.planetiler.overture.avrogen.bag>> m0 = this.names; // Need fresh name due to limitation of macro system
        if (m0 == null) {
          m0 = new java.util.HashMap<java.lang.CharSequence,java.util.List<com.onthegomap.planetiler.overture.avrogen.bag>>((int)size0);
          this.names = m0;
        } else m0.clear();
        for ( ; 0 < size0; size0 = in.mapNext()) {
          for ( ; size0 != 0; size0--) {
            java.lang.CharSequence k0 = null;
            k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
            java.util.List<com.onthegomap.planetiler.overture.avrogen.bag> v0 = null;
            if (in.readIndex() != 1) {
              in.readNull();
              v0 = null;
            } else {
              long size1 = in.readArrayStart();
              java.util.List<com.onthegomap.planetiler.overture.avrogen.bag> a1 = v0;
              if (a1 == null) {
                a1 = new SpecificData.Array<com.onthegomap.planetiler.overture.avrogen.bag>((int)size1, SCHEMA$.getField("names").schema().getTypes().get(1).getValueType().getTypes().get(1));
                v0 = a1;
              } else a1.clear();
              SpecificData.Array<com.onthegomap.planetiler.overture.avrogen.bag> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<com.onthegomap.planetiler.overture.avrogen.bag>)a1 : null);
              for ( ; 0 < size1; size1 = in.arrayNext()) {
                for ( ; size1 != 0; size1--) {
                  com.onthegomap.planetiler.overture.avrogen.bag e1 = (ga1 != null ? ga1.peek() : null);
                  if (e1 == null) {
                    e1 = new com.onthegomap.planetiler.overture.avrogen.bag();
                  }
                  e1.customDecode(in);
                  a1.add(e1);
                }
              }
            }
            m0.put(k0, v0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.categories = null;
      } else {
        if (this.categories == null) {
          this.categories = new com.onthegomap.planetiler.overture.avrogen.categories();
        }
        this.categories.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.confidence = null;
      } else {
        this.confidence = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.websites = null;
      } else {
        long size2 = in.readArrayStart();
        java.util.List<bag3.bag> a2 = this.websites;
        if (a2 == null) {
          a2 = new SpecificData.Array<bag3.bag>((int)size2, SCHEMA$.getField("websites").schema().getTypes().get(1));
          this.websites = a2;
        } else a2.clear();
        SpecificData.Array<bag3.bag> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<bag3.bag>)a2 : null);
        for ( ; 0 < size2; size2 = in.arrayNext()) {
          for ( ; size2 != 0; size2--) {
            bag3.bag e2 = (ga2 != null ? ga2.peek() : null);
            if (e2 == null) {
              e2 = new bag3.bag();
            }
            e2.customDecode(in);
            a2.add(e2);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.socials = null;
      } else {
        long size3 = in.readArrayStart();
        java.util.List<bag4.bag> a3 = this.socials;
        if (a3 == null) {
          a3 = new SpecificData.Array<bag4.bag>((int)size3, SCHEMA$.getField("socials").schema().getTypes().get(1));
          this.socials = a3;
        } else a3.clear();
        SpecificData.Array<bag4.bag> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<bag4.bag>)a3 : null);
        for ( ; 0 < size3; size3 = in.arrayNext()) {
          for ( ; size3 != 0; size3--) {
            bag4.bag e3 = (ga3 != null ? ga3.peek() : null);
            if (e3 == null) {
              e3 = new bag4.bag();
            }
            e3.customDecode(in);
            a3.add(e3);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.emails = null;
      } else {
        long size4 = in.readArrayStart();
        java.util.List<bag5.bag> a4 = this.emails;
        if (a4 == null) {
          a4 = new SpecificData.Array<bag5.bag>((int)size4, SCHEMA$.getField("emails").schema().getTypes().get(1));
          this.emails = a4;
        } else a4.clear();
        SpecificData.Array<bag5.bag> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<bag5.bag>)a4 : null);
        for ( ; 0 < size4; size4 = in.arrayNext()) {
          for ( ; size4 != 0; size4--) {
            bag5.bag e4 = (ga4 != null ? ga4.peek() : null);
            if (e4 == null) {
              e4 = new bag5.bag();
            }
            e4.customDecode(in);
            a4.add(e4);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.phones = null;
      } else {
        long size5 = in.readArrayStart();
        java.util.List<bag6.bag> a5 = this.phones;
        if (a5 == null) {
          a5 = new SpecificData.Array<bag6.bag>((int)size5, SCHEMA$.getField("phones").schema().getTypes().get(1));
          this.phones = a5;
        } else a5.clear();
        SpecificData.Array<bag6.bag> ga5 = (a5 instanceof SpecificData.Array ? (SpecificData.Array<bag6.bag>)a5 : null);
        for ( ; 0 < size5; size5 = in.arrayNext()) {
          for ( ; size5 != 0; size5--) {
            bag6.bag e5 = (ga5 != null ? ga5.peek() : null);
            if (e5 == null) {
              e5 = new bag6.bag();
            }
            e5.customDecode(in);
            a5.add(e5);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.brand = null;
      } else {
        if (this.brand == null) {
          this.brand = new com.onthegomap.planetiler.overture.avrogen.brand();
        }
        this.brand.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.addresses = null;
      } else {
        long size6 = in.readArrayStart();
        java.util.List<bag8.bag> a6 = this.addresses;
        if (a6 == null) {
          a6 = new SpecificData.Array<bag8.bag>((int)size6, SCHEMA$.getField("addresses").schema().getTypes().get(1));
          this.addresses = a6;
        } else a6.clear();
        SpecificData.Array<bag8.bag> ga6 = (a6 instanceof SpecificData.Array ? (SpecificData.Array<bag8.bag>)a6 : null);
        for ( ; 0 < size6; size6 = in.arrayNext()) {
          for ( ; size6 != 0; size6--) {
            bag8.bag e6 = (ga6 != null ? ga6.peek() : null);
            if (e6 == null) {
              e6 = new bag8.bag();
            }
            e6.customDecode(in);
            a6.add(e6);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.sources = null;
      } else {
        long size7 = in.readArrayStart();
        java.util.List<bag9.bag> a7 = this.sources;
        if (a7 == null) {
          a7 = new SpecificData.Array<bag9.bag>((int)size7, SCHEMA$.getField("sources").schema().getTypes().get(1));
          this.sources = a7;
        } else a7.clear();
        SpecificData.Array<bag9.bag> ga7 = (a7 instanceof SpecificData.Array ? (SpecificData.Array<bag9.bag>)a7 : null);
        for ( ; 0 < size7; size7 = in.arrayNext()) {
          for ( ; size7 != 0; size7--) {
            bag9.bag e7 = (ga7 != null ? ga7.peek() : null);
            if (e7 == null) {
              e7 = new bag9.bag();
            }
            e7.customDecode(in);
            a7.add(e7);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bbox = null;
      } else {
        if (this.bbox == null) {
          this.bbox = new com.onthegomap.planetiler.overture.avrogen.bbox();
        }
        this.bbox.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.geometry = null;
      } else {
        this.geometry = in.readBytes(this.geometry);
      }

    } else {
      for (int i = 0; i < 15; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id = null;
          } else {
            this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.updatetime = null;
          } else {
            this.updatetime = in.readString(this.updatetime instanceof Utf8 ? (Utf8)this.updatetime : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.version = null;
          } else {
            this.version = in.readInt();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.names = null;
          } else {
            long size0 = in.readMapStart();
            java.util.Map<java.lang.CharSequence,java.util.List<com.onthegomap.planetiler.overture.avrogen.bag>> m0 = this.names; // Need fresh name due to limitation of macro system
            if (m0 == null) {
              m0 = new java.util.HashMap<java.lang.CharSequence,java.util.List<com.onthegomap.planetiler.overture.avrogen.bag>>((int)size0);
              this.names = m0;
            } else m0.clear();
            for ( ; 0 < size0; size0 = in.mapNext()) {
              for ( ; size0 != 0; size0--) {
                java.lang.CharSequence k0 = null;
                k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
                java.util.List<com.onthegomap.planetiler.overture.avrogen.bag> v0 = null;
                if (in.readIndex() != 1) {
                  in.readNull();
                  v0 = null;
                } else {
                  long size1 = in.readArrayStart();
                  java.util.List<com.onthegomap.planetiler.overture.avrogen.bag> a1 = v0;
                  if (a1 == null) {
                    a1 = new SpecificData.Array<com.onthegomap.planetiler.overture.avrogen.bag>((int)size1, SCHEMA$.getField("names").schema().getTypes().get(1).getValueType().getTypes().get(1));
                    v0 = a1;
                  } else a1.clear();
                  SpecificData.Array<com.onthegomap.planetiler.overture.avrogen.bag> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<com.onthegomap.planetiler.overture.avrogen.bag>)a1 : null);
                  for ( ; 0 < size1; size1 = in.arrayNext()) {
                    for ( ; size1 != 0; size1--) {
                      com.onthegomap.planetiler.overture.avrogen.bag e1 = (ga1 != null ? ga1.peek() : null);
                      if (e1 == null) {
                        e1 = new com.onthegomap.planetiler.overture.avrogen.bag();
                      }
                      e1.customDecode(in);
                      a1.add(e1);
                    }
                  }
                }
                m0.put(k0, v0);
              }
            }
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.categories = null;
          } else {
            if (this.categories == null) {
              this.categories = new com.onthegomap.planetiler.overture.avrogen.categories();
            }
            this.categories.customDecode(in);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.confidence = null;
          } else {
            this.confidence = in.readDouble();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.websites = null;
          } else {
            long size2 = in.readArrayStart();
            java.util.List<bag3.bag> a2 = this.websites;
            if (a2 == null) {
              a2 = new SpecificData.Array<bag3.bag>((int)size2, SCHEMA$.getField("websites").schema().getTypes().get(1));
              this.websites = a2;
            } else a2.clear();
            SpecificData.Array<bag3.bag> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<bag3.bag>)a2 : null);
            for ( ; 0 < size2; size2 = in.arrayNext()) {
              for ( ; size2 != 0; size2--) {
                bag3.bag e2 = (ga2 != null ? ga2.peek() : null);
                if (e2 == null) {
                  e2 = new bag3.bag();
                }
                e2.customDecode(in);
                a2.add(e2);
              }
            }
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.socials = null;
          } else {
            long size3 = in.readArrayStart();
            java.util.List<bag4.bag> a3 = this.socials;
            if (a3 == null) {
              a3 = new SpecificData.Array<bag4.bag>((int)size3, SCHEMA$.getField("socials").schema().getTypes().get(1));
              this.socials = a3;
            } else a3.clear();
            SpecificData.Array<bag4.bag> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<bag4.bag>)a3 : null);
            for ( ; 0 < size3; size3 = in.arrayNext()) {
              for ( ; size3 != 0; size3--) {
                bag4.bag e3 = (ga3 != null ? ga3.peek() : null);
                if (e3 == null) {
                  e3 = new bag4.bag();
                }
                e3.customDecode(in);
                a3.add(e3);
              }
            }
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.emails = null;
          } else {
            long size4 = in.readArrayStart();
            java.util.List<bag5.bag> a4 = this.emails;
            if (a4 == null) {
              a4 = new SpecificData.Array<bag5.bag>((int)size4, SCHEMA$.getField("emails").schema().getTypes().get(1));
              this.emails = a4;
            } else a4.clear();
            SpecificData.Array<bag5.bag> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<bag5.bag>)a4 : null);
            for ( ; 0 < size4; size4 = in.arrayNext()) {
              for ( ; size4 != 0; size4--) {
                bag5.bag e4 = (ga4 != null ? ga4.peek() : null);
                if (e4 == null) {
                  e4 = new bag5.bag();
                }
                e4.customDecode(in);
                a4.add(e4);
              }
            }
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.phones = null;
          } else {
            long size5 = in.readArrayStart();
            java.util.List<bag6.bag> a5 = this.phones;
            if (a5 == null) {
              a5 = new SpecificData.Array<bag6.bag>((int)size5, SCHEMA$.getField("phones").schema().getTypes().get(1));
              this.phones = a5;
            } else a5.clear();
            SpecificData.Array<bag6.bag> ga5 = (a5 instanceof SpecificData.Array ? (SpecificData.Array<bag6.bag>)a5 : null);
            for ( ; 0 < size5; size5 = in.arrayNext()) {
              for ( ; size5 != 0; size5--) {
                bag6.bag e5 = (ga5 != null ? ga5.peek() : null);
                if (e5 == null) {
                  e5 = new bag6.bag();
                }
                e5.customDecode(in);
                a5.add(e5);
              }
            }
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.brand = null;
          } else {
            if (this.brand == null) {
              this.brand = new com.onthegomap.planetiler.overture.avrogen.brand();
            }
            this.brand.customDecode(in);
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.addresses = null;
          } else {
            long size6 = in.readArrayStart();
            java.util.List<bag8.bag> a6 = this.addresses;
            if (a6 == null) {
              a6 = new SpecificData.Array<bag8.bag>((int)size6, SCHEMA$.getField("addresses").schema().getTypes().get(1));
              this.addresses = a6;
            } else a6.clear();
            SpecificData.Array<bag8.bag> ga6 = (a6 instanceof SpecificData.Array ? (SpecificData.Array<bag8.bag>)a6 : null);
            for ( ; 0 < size6; size6 = in.arrayNext()) {
              for ( ; size6 != 0; size6--) {
                bag8.bag e6 = (ga6 != null ? ga6.peek() : null);
                if (e6 == null) {
                  e6 = new bag8.bag();
                }
                e6.customDecode(in);
                a6.add(e6);
              }
            }
          }
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sources = null;
          } else {
            long size7 = in.readArrayStart();
            java.util.List<bag9.bag> a7 = this.sources;
            if (a7 == null) {
              a7 = new SpecificData.Array<bag9.bag>((int)size7, SCHEMA$.getField("sources").schema().getTypes().get(1));
              this.sources = a7;
            } else a7.clear();
            SpecificData.Array<bag9.bag> ga7 = (a7 instanceof SpecificData.Array ? (SpecificData.Array<bag9.bag>)a7 : null);
            for ( ; 0 < size7; size7 = in.arrayNext()) {
              for ( ; size7 != 0; size7--) {
                bag9.bag e7 = (ga7 != null ? ga7.peek() : null);
                if (e7 == null) {
                  e7 = new bag9.bag();
                }
                e7.customDecode(in);
                a7.add(e7);
              }
            }
          }
          break;

        case 13:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bbox = null;
          } else {
            if (this.bbox == null) {
              this.bbox = new com.onthegomap.planetiler.overture.avrogen.bbox();
            }
            this.bbox.customDecode(in);
          }
          break;

        case 14:
          if (in.readIndex() != 1) {
            in.readNull();
            this.geometry = null;
          } else {
            this.geometry = in.readBytes(this.geometry);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










